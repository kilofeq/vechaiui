{"version":3,"file":"refs.js","names":["setRef","ref","value","current","useForkRef","refA","refB","React","useMemo","refValue"],"sources":["../../src/refs.ts"],"sourcesContent":["import * as React from \"react\";\n\ntype ReactRef<T> =\n  | React.Ref<T>\n  | React.RefObject<T>\n  | React.MutableRefObject<T>;\n\nexport function setRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else if (ref) {\n    // @ts-ignore\n    ref.current = value;\n  }\n}\n\nexport function useForkRef<T = any>(\n  refA: ReactRef<T> | undefined,\n  refB: ReactRef<T> | undefined\n) {\n  return React.useMemo(() => {\n    if (refA == null && refB == null) {\n      return null;\n    }\n    return (refValue: T) => {\n      setRef(refA, refValue);\n      setRef(refB, refValue);\n    };\n  }, [refA, refB]);\n}\n"],"mappings":";;;;;AAAA;AAA+B;AAAA;AAOxB,SAASA,MAAM,CAAUC,GAA4B,EAAEC,KAAQ,EAAE;EACtE,IAAI,OAAOD,GAAG,KAAK,UAAU,EAAE;IAC7BA,GAAG,CAACC,KAAK,CAAC;EACZ,CAAC,MAAM,IAAID,GAAG,EAAE;IACd;IACAA,GAAG,CAACE,OAAO,GAAGD,KAAK;EACrB;AACF;AAEO,SAASE,UAAU,CACxBC,IAA6B,EAC7BC,IAA6B,EAC7B;EACA,OAAOC,KAAK,CAACC,OAAO,CAAC,YAAM;IACzB,IAAIH,IAAI,IAAI,IAAI,IAAIC,IAAI,IAAI,IAAI,EAAE;MAChC,OAAO,IAAI;IACb;IACA,OAAO,UAACG,QAAW,EAAK;MACtBT,MAAM,CAACK,IAAI,EAAEI,QAAQ,CAAC;MACtBT,MAAM,CAACM,IAAI,EAAEG,QAAQ,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,CAACJ,IAAI,EAAEC,IAAI,CAAC,CAAC;AAClB"}