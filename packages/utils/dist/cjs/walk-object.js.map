{"version":3,"file":"walk-object.js","names":["walkObject","target","predicate","inner","value","path","isArray","map","item","index","String","isObject","Object","fromEntries","entries","key","child"],"sources":["../../src/walk-object.ts"],"sourcesContent":["import { isArray, isObject } from \"./\";\n\nexport type WalkObjectPredicate<Leaf = unknown> = (\n  value: unknown,\n  path: string[]\n) => Leaf;\n\nexport type MappedLeavesObject<Obj, LeafType> = {\n  [Prop in keyof Obj]: Obj[Prop] extends Array<any>\n    ? MappedLeavesObject<Obj[Prop][number], LeafType>[]\n    : Obj[Prop] extends object\n    ? MappedLeavesObject<Obj[Prop], LeafType>\n    : LeafType;\n};\n\nexport function walkObject<Target, LeafType>(\n  target: Target,\n  predicate: WalkObjectPredicate<LeafType>\n): MappedLeavesObject<Target, ReturnType<WalkObjectPredicate<LeafType>>> {\n  function inner(value: unknown, path: string[] = []): any {\n    if (isArray(value)) {\n      return value.map((item, index) => inner(item, [...path, String(index)]));\n    }\n\n    if (isObject(value)) {\n      return Object.fromEntries(\n        Object.entries(value).map(([key, child]) => [\n          key,\n          inner(child, [...path, key]),\n        ])\n      );\n    }\n\n    return predicate(value, path);\n  }\n\n  return inner(target);\n}\n"],"mappings":";;;;AAAA;AAeO,SAASA,UAAU,CACxBC,MAAc,EACdC,SAAwC,EAC+B;EACvE,SAASC,KAAK,CAACC,KAAc,EAAEC,IAAc,EAAY;IAAA,IAA1BA,IAAc;MAAdA,IAAc,GAAG,EAAE;IAAA;IAChD,IAAI,IAAAC,SAAO,EAACF,KAAK,CAAC,EAAE;MAClB,OAAOA,KAAK,CAACG,GAAG,CAAC,UAACC,IAAI,EAAEC,KAAK;QAAA,OAAKN,KAAK,CAACK,IAAI,YAAMH,IAAI,GAAEK,MAAM,CAACD,KAAK,CAAC,GAAE;MAAA,EAAC;IAC1E;IAEA,IAAI,IAAAE,UAAQ,EAACP,KAAK,CAAC,EAAE;MACnB,OAAOQ,MAAM,CAACC,WAAW,CACvBD,MAAM,CAACE,OAAO,CAACV,KAAK,CAAC,CAACG,GAAG,CAAC;QAAA,IAAEQ,GAAG;UAAEC,KAAK;QAAA,OAAM,CAC1CD,GAAG,EACHZ,KAAK,CAACa,KAAK,YAAMX,IAAI,GAAEU,GAAG,GAAE,CAC7B;MAAA,EAAC,CACH;IACH;IAEA,OAAOb,SAAS,CAACE,KAAK,EAAEC,IAAI,CAAC;EAC/B;EAEA,OAAOF,KAAK,CAACF,MAAM,CAAC;AACtB"}