{"version":3,"sources":["../../src/color.ts"],"names":["colorString","hsl2rgb","h","s","l","c","Math","abs","x","m","r","g","b","round","hwb2rgb","w","rgb","i","toRGBA","color","test","colorTuple","get","hsl","startsWith","hwb","value","toRGB","slice","toColor","colorStr","rgba","join","opacity","toString"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AAGA,OAAO,SAASC,OAAT,CACLC,CADK,EAELC,CAFK,EAGLC,CAHK,EAIqB;AACzBD,EAAAA,CAAC,GAAGA,CAAC,GAAG,GAAT,EAAgBC,CAAC,GAAGA,CAAC,GAAG,GAAxB;AACA,MAAIF,CAAC,IAAI,GAAT,EAAcA,CAAC,IAAI,GAAL;AAEd,MAAMG,CAAC,GAAG,CAAC,IAAIC,IAAI,CAACC,GAAL,CAAS,IAAIH,CAAJ,GAAQ,CAAjB,CAAL,IAA4BD,CAAtC;AACA,MAAMK,CAAC,GAAGH,CAAC,IAAI,IAAIC,IAAI,CAACC,GAAL,CAAWL,CAAC,GAAG,EAAL,GAAW,CAAZ,GAAiB,CAA1B,CAAR,CAAX;AACA,MAAMO,CAAC,GAAGL,CAAC,GAAGC,CAAC,GAAG,CAAlB;AACA,MAAIK,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,MAAI,KAAKV,CAAL,IAAUA,CAAC,GAAG,EAAlB,EAAsB;AACpBQ,IAAAA,CAAC,GAAGL,CAAJ;AACAM,IAAAA,CAAC,GAAGH,CAAJ;AACAI,IAAAA,CAAC,GAAG,CAAJ;AACD,GAJD,MAIO,IAAI,MAAMV,CAAN,IAAWA,CAAC,GAAG,GAAnB,EAAwB;AAC7BQ,IAAAA,CAAC,GAAGF,CAAJ;AACAG,IAAAA,CAAC,GAAGN,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACD,GAJM,MAIA,IAAI,OAAOV,CAAP,IAAYA,CAAC,GAAG,GAApB,EAAyB;AAC9BQ,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAGN,CAAJ;AACAO,IAAAA,CAAC,GAAGJ,CAAJ;AACD,GAJM,MAIA,IAAI,OAAON,CAAP,IAAYA,CAAC,GAAG,GAApB,EAAyB;AAC9BQ,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAGH,CAAJ;AACAI,IAAAA,CAAC,GAAGP,CAAJ;AACD,GAJM,MAIA,IAAI,OAAOH,CAAP,IAAYA,CAAC,GAAG,GAApB,EAAyB;AAC9BQ,IAAAA,CAAC,GAAGF,CAAJ;AACAG,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAGP,CAAJ;AACD,GAJM,MAIA,IAAI,OAAOH,CAAP,IAAYA,CAAC,GAAG,GAApB,EAAyB;AAC9BQ,IAAAA,CAAC,GAAGL,CAAJ;AACAM,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAGJ,CAAJ;AACD,GAnCyB,CAoC1B;;;AACAE,EAAAA,CAAC,GAAGJ,IAAI,CAACO,KAAL,CAAW,CAACH,CAAC,GAAGD,CAAL,IAAU,GAArB,CAAJ;AACAE,EAAAA,CAAC,GAAGL,IAAI,CAACO,KAAL,CAAW,CAACF,CAAC,GAAGF,CAAL,IAAU,GAArB,CAAJ;AACAG,EAAAA,CAAC,GAAGN,IAAI,CAACO,KAAL,CAAW,CAACD,CAAC,GAAGH,CAAL,IAAU,GAArB,CAAJ;AACA,SAAO,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAP;AACD;AAED,OAAO,SAASE,OAAT,CACLZ,CADK,EAELa,CAFK,EAGLH,CAHK,EAIqB;AAC1B,MAAMI,GAAG,GAAGf,OAAO,CAACC,CAAD,EAAI,GAAJ,EAAS,EAAT,CAAnB;;AAEA,OAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AAC1B,QAAIZ,CAAC,GAAGW,GAAG,CAACC,CAAD,CAAH,GAAS,GAAjB;AAEAZ,IAAAA,CAAC,IAAI,IAAIU,CAAC,GAAG,GAAR,GAAcH,CAAC,GAAG,GAAvB;AACAP,IAAAA,CAAC,IAAIU,CAAC,GAAG,GAAT;AAEAC,IAAAA,GAAG,CAACC,CAAD,CAAH,GAASX,IAAI,CAACO,KAAL,CAAWR,CAAC,GAAG,GAAf,CAAT;AACD;;AAED,SAAOW,GAAP;AACD;AAED,OAAO,SAASE,MAAT,CAAgBC,KAAhB,EAAkD;AAAA;;AACvD,MAAI,SAASC,IAAT,CAAcD,KAAd,CAAJ,EAA0B;AACxB,QAAME,UAAU,GAAGrB,WAAW,CAACsB,GAAZ,CAAgBC,GAAhB,CAAoBJ,KAApB,CAAnB;AACA,QAAI,CAACE,UAAL,EAAiB;AACjB,WAAO,CACL,GAAGpB,OAAO,CAACoB,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,EAA+BA,UAAU,CAAC,CAAD,CAAzC,CADL,EAELA,UAAU,CAAC,CAAD,CAFL,CAAP;AAID,GAPD,MAOO,IAAI,SAASD,IAAT,CAAcD,KAAd,CAAJ,EAA0B;AAC/B,QAAME,WAAU,GAAGrB,WAAW,CAACsB,GAAZ,CAAgBN,GAAhB,CAAoBG,KAApB,CAAnB;;AACA,QAAI,CAACE,WAAL,EAAiB;AACjB,WAAOA,WAAP;AACD,GAJM,MAIA,IAAIF,KAAK,CAACK,UAAN,CAAiB,KAAjB,CAAJ,EAA6B;AAClC,QAAMH,YAAU,GAAGrB,WAAW,CAACsB,GAAZ,CAAgBG,GAAhB,CAAoBN,KAApB,CAAnB;;AACA,QAAI,CAACE,YAAL,EAAiB;AACjB,WAAO,CACL,GAAGP,OAAO,CAACO,YAAU,CAAC,CAAD,CAAX,EAAgBA,YAAU,CAAC,CAAD,CAA1B,EAA+BA,YAAU,CAAC,CAAD,CAAzC,CADL,EAELA,YAAU,CAAC,CAAD,CAFL,CAAP;AAID;;AACD,6BAAOrB,WAAW,CAACsB,GAAZ,CAAgBH,KAAhB,CAAP,qBAAO,iBAAwBO,KAA/B;AACD;AAED,OAAO,SAASC,KAAT,CAAeR,KAAf,EAAoD;AAAA;;AACzD,oBAAOD,MAAM,CAACC,KAAD,CAAb,qBAAO,QAAeS,KAAf,CAAqB,CAArB,EAAwB,CAAxB,CAAP;AACD;AAED,OAAO,SAASC,OAAT,CAAiBC,QAAjB,EAAuE;AAC5E,MAAMC,IAAI,GAAGb,MAAM,CAACY,QAAD,CAAnB;AACA,MAAMX,KAAK,GAAGY,IAAI,GAAGA,IAAI,CAACH,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiBI,IAAjB,CAAsB,IAAtB,CAAH,GAAiCF,QAAnD;AACA,MAAMG,OAAO,GAAGF,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAJ,CAAQG,QAAR,EAAH,GAAwB,GAA5C;AAEA,SAAO;AACLf,IAAAA,KADK;AAELc,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import colorString from \"color-string\";\nimport type { Color } from \"color-string\";\n\nexport function hsl2rgb(\n  h: number,\n  s: number,\n  l: number\n): [number, number, number] {\n  (s = s / 100), (l = l / 100);\n  if (h >= 360) h %= 360;\n\n  const c = (1 - Math.abs(2 * l - 1)) * s;\n  const x = c * (1 - Math.abs(((h / 60) % 2) - 1));\n  const m = l - c / 2;\n  let r = 0;\n  let g = 0;\n  let b = 0;\n\n  if (0 <= h && h < 60) {\n    r = c;\n    g = x;\n    b = 0;\n  } else if (60 <= h && h < 120) {\n    r = x;\n    g = c;\n    b = 0;\n  } else if (120 <= h && h < 180) {\n    r = 0;\n    g = c;\n    b = x;\n  } else if (180 <= h && h < 240) {\n    r = 0;\n    g = x;\n    b = c;\n  } else if (240 <= h && h < 300) {\n    r = x;\n    g = 0;\n    b = c;\n  } else if (300 <= h && h < 360) {\n    r = c;\n    g = 0;\n    b = x;\n  }\n  // having obtained RGB, convert channels to hex\n  r = Math.round((r + m) * 255);\n  g = Math.round((g + m) * 255);\n  b = Math.round((b + m) * 255);\n  return [r, g, b];\n}\n\nexport function hwb2rgb(\n  h: number,\n  w: number,\n  b: number\n): [number, number, number] {\n  const rgb = hsl2rgb(h, 100, 50);\n\n  for (let i = 0; i < 3; ++i) {\n    let c = rgb[i] / 255;\n\n    c *= 1 - w / 100 - b / 100;\n    c += w / 100;\n\n    rgb[i] = Math.round(c * 255);\n  }\n\n  return rgb;\n}\n\nexport function toRGBA(color: string): Color | undefined {\n  if (/^hsla?/.test(color)) {\n    const colorTuple = colorString.get.hsl(color);\n    if (!colorTuple) return;\n    return [\n      ...hsl2rgb(colorTuple[0], colorTuple[1], colorTuple[2]),\n      colorTuple[3],\n    ];\n  } else if (/^rgba?/.test(color)) {\n    const colorTuple = colorString.get.rgb(color);\n    if (!colorTuple) return;\n    return colorTuple;\n  } else if (color.startsWith(\"hwb\")) {\n    const colorTuple = colorString.get.hwb(color);\n    if (!colorTuple) return;\n    return [\n      ...hwb2rgb(colorTuple[0], colorTuple[1], colorTuple[2]),\n      colorTuple[3],\n    ];\n  }\n  return colorString.get(color)?.value;\n}\n\nexport function toRGB(color: string): number[] | undefined {\n  return toRGBA(color)?.slice(0, 3);\n}\n\nexport function toColor(colorStr: string): { color: string; opacity: string } {\n  const rgba = toRGBA(colorStr);\n  const color = rgba ? rgba.slice(0, 3).join(\", \") : colorStr;\n  const opacity = rgba ? rgba[3].toString() : \"1\";\n\n  return {\n    color,\n    opacity,\n  };\n}\n"],"file":"color.js"}