{"version":3,"sources":["../../../src/input/input.tsx"],"names":["Input","React","forwardRef","props","ref","size","variant","color","as","Comp","ariaLabel","ariaDescribedby","className","type","id","rest","readOnly","disabled","invalid","required","formControl","classes","undefined","__DEV__","displayName"],"mappings":";;;;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;AAkDO,IAAMA,KAAK,gBAAGC,KAAK,CAACC,UAAN,CAA0C,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC7E,oBAWID,KAXJ,CACEE,IADF;AAAA,MACEA,IADF,4BACS,IADT;AAAA,uBAWIF,KAXJ,CAEEG,OAFF;AAAA,MAEEA,OAFF,+BAEY,SAFZ;AAAA,qBAWIH,KAXJ,CAGEI,KAHF;AAAA,MAGEA,KAHF,6BAGU,SAHV;AAAA,kBAWIJ,KAXJ,CAIEK,EAJF;AAAA,MAIMC,IAJN,0BAIa,OAJb;AAAA,MAKgBC,SALhB,GAWIP,KAXJ,CAKE,YALF;AAAA,MAMsBQ,eANtB,GAWIR,KAXJ,CAME,kBANF;AAAA,MAOES,SAPF,GAWIT,KAXJ,CAOES,SAPF;AAAA,oBAWIT,KAXJ,CAQEU,IARF;AAAA,MAQEA,IARF,4BAQS,MART;AAAA,MASEC,EATF,GAWIX,KAXJ,CASEW,EATF;AAAA,MAUKC,IAVL,iCAWIZ,KAXJ;;AAaA,wBAAkE,iCAAeA,KAAf,CAAlE;AAAA,MAAQa,QAAR,mBAAQA,QAAR;AAAA,MAAkBC,QAAlB,mBAAkBA,QAAlB;AAAA,MAA4BC,OAA5B,mBAA4BA,OAA5B;AAAA,MAAqCC,QAArC,mBAAqCA,QAArC;AAAA,MAAkDC,WAAlD;;AACA,MAAMC,OAAO,GAAG,2BAAc;AAAEhB,IAAAA,IAAI,EAAJA,IAAF;AAAQC,IAAAA,OAAO,EAAPA,OAAR;AAAiBW,IAAAA,QAAQ,EAARA;AAAjB,GAAd,CAAhB;AAEA,sBACE,oBAAC,IAAD;AACE,IAAA,GAAG,EAAEb,GADP;AAEE,IAAA,QAAQ,EAAEY,QAFZ;AAGE,qBAAeA,QAHjB;AAIE,IAAA,QAAQ,EAAEC,QAJZ;AAKE,qBAAeA,QALjB;AAME,kBAAYP,SANd;AAOE,oBAAcQ,OAPhB;AAQE,IAAA,QAAQ,EAAEC,QARZ;AASE,qBAAeA,QATjB;AAUE,wBAAkBR,eAVpB;AAWE,kBAAYJ,KAAK,GAAGA,KAAH,GAAWe,SAX9B;AAYE,IAAA,SAAS,EAAE,eAAGD,OAAH,EAAYT,SAAZ,CAZb;AAaE,IAAA,IAAI,EAAEC,IAbR;AAcE,IAAA,EAAE,EAAEC,EAAE,IAAIM,WAAW,CAACN;AAdxB,KAeMC,IAfN,EADF;AAmBD,CApCoB,CAAd;;;AAsCP,IAAIQ,cAAJ,EAAa;AACXvB,EAAAA,KAAK,CAACwB,WAAN,GAAoB,OAApB;AACD","sourcesContent":["import { DefaultProps } from \"@vechaiui/theme\";\nimport { cx, __DEV__ } from \"@vechaiui/utils\";\nimport * as React from \"react\";\n\nimport { useFormControl } from \"../form-control\";\nimport { useInputClass } from \"./styles\";\n\nexport interface IInputProps<T = HTMLInputElement> extends DefaultProps {\n  /* Makes input disabled */\n  disabled?: React.InputHTMLAttributes<T>[\"disabled\"];\n  /* Makes input invalid */\n  invalid?: boolean;\n  /* Makes input required */\n  required?: React.InputHTMLAttributes<T>[\"required\"];\n  /* Makes input readOnly */\n  readOnly?: React.InputHTMLAttributes<T>[\"readOnly\"];\n  /* Set the input color */\n  color?: string;\n  /* Size of the input */\n  size?: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\n  /** Controls input appearance */\n  variant?: \"outline\" | \"solid\";\n  /**\n   * The element or component to use in place of `input`\n   */\n  as?: React.ElementType;\n  /** */\n  type?: string;\n  /**\n   * A11y: A label that describes the input\n   */\n  \"aria-label\"?: string;\n  /**\n   * A11y: The id of the element that describes the input\n   */\n  \"aria-describedby\"?: string;\n}\n\nexport type OmittedTypes =\n  | \"size\"\n  | \"disabled\"\n  | \"required\"\n  | \"checked\"\n  | \"defaultChecked\"\n  | \"readOnly\";\n\nexport type InputHTMLAttributes = Omit<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  OmittedTypes\n>;\n\nexport type InputProps<T = HTMLElement> = IInputProps &\n  InputHTMLAttributes &\n  React.RefAttributes<T>;\n\nexport const Input = React.forwardRef<HTMLElement, InputProps>((props, ref) => {\n  const {\n    size = \"md\",\n    variant = \"outline\",\n    color = \"primary\",\n    as: Comp = \"input\",\n    \"aria-label\": ariaLabel,\n    \"aria-describedby\": ariaDescribedby,\n    className,\n    type = \"text\",\n    id,\n    ...rest\n  } = props;\n\n  const { readOnly, disabled, invalid, required, ...formControl } = useFormControl(props);\n  const classes = useInputClass({ size, variant, disabled });\n\n  return (\n    <Comp\n      ref={ref}\n      readOnly={readOnly}\n      aria-readonly={readOnly}\n      disabled={disabled}\n      aria-disabled={disabled}\n      aria-label={ariaLabel}\n      aria-invalid={invalid}\n      required={required}\n      aria-required={required}\n      aria-describedby={ariaDescribedby}\n      data-color={color ? color : undefined}\n      className={cx(classes, className)}\n      type={type}\n      id={id || formControl.id}\n      {...rest}\n    />\n  );\n});\n\nif (__DEV__) {\n  Input.displayName = \"Input\";\n}"],"file":"input.js"}