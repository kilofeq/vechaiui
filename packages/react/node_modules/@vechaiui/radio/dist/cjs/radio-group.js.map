{"version":3,"sources":["../../src/radio-group.tsx"],"names":["RadioGroup","React","forwardRef","props","ref","onChange","name","color","size","defaultValue","inline","valueProp","value","children","rest","isControlled","current","setValue","_value","rootRef","_onChange","event","target","fallbackName","_name","validChildren","clones","map","child","index","checked","focus","input","querySelector","__DEV__","displayName"],"mappings":"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","sourcesContent":["import { useId } from \"@reach/auto-id\";\nimport { DefaultProps } from \"@vechaiui/theme\";\nimport { cx, getValidChildren, __DEV__ } from \"@vechaiui/utils\";\nimport * as React from \"react\";\nimport { cloneElement, useImperativeHandle, useRef, useState } from \"react\";\n\nimport { RadioProps } from \"./radio\";\n\ninterface IRadioGroupProps extends DefaultProps {\n  /**\n   * The id of the radio group.\n   */\n  id?: string;\n  /**\n   * The name of the radio group. This prop is passed to each checbox\n   */\n  name?: string;\n  /**\n   * The content of the radio group. Must be the `Radio` component\n   */\n  children?: React.ReactNode;\n  /**\n   * The initial value of the radio group\n   */\n  defaultValue?: RadioProps[\"value\"];\n  /**\n   * The value of the radio group\n   */\n  value?: RadioProps[\"value\"];\n  /* Size of all wrapped radio */\n\n  size?: RadioProps[\"size\"];\n  /* Color of all wrapped radio */\n\n  color?: RadioProps[\"color\"];\n  /**\n   * The callback fired when any children Radio is checked or unchecked\n   */\n  onChange?: (\n    event: React.ChangeEvent<HTMLInputElement>,\n    value: RadioProps[\"value\"]\n  ) => void;\n  /**\n   * If `true`, the radio will aligned horizontally.\n   */\n  inline?: boolean;\n}\n\ntype RadioGroupElement = {\n  focus: () => void;\n} | undefined;\nexport type RadioGroupProps = IRadioGroupProps;\n\nexport const RadioGroup = React.forwardRef<RadioGroupElement, RadioGroupProps>(\n  (props, ref) => {\n    const {\n      onChange,\n      name,\n      color,\n      size,\n      defaultValue,\n      inline,\n      value: valueProp,\n      children,\n      ...rest\n    } = props;\n    const { current: isControlled } = useRef(valueProp != null);\n    const [value, setValue] = useState(defaultValue || null);\n    const _value = isControlled ? valueProp : value;\n\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    const _onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (!isControlled) {\n        setValue(event.target.value);\n      }\n\n      if (onChange) {\n        onChange(event, event.target.value);\n      }\n    };\n\n    // If no name is passed, we'll generate a random, unique name\n    const fallbackName = `radio-${useId()}`;\n    const _name = name || fallbackName;\n\n    const validChildren = getValidChildren(children);\n\n    const clones = validChildren.map((child, index) => {\n      return (\n        <div key={index} className={cx(inline ? \"inline-block\" : \"block\")}>\n          {cloneElement(child, {\n            size: child.props.size || size,\n            color: child.props.color || color,\n            name: _name,\n            onChange: _onChange,\n            checked: child.props.value === _value,\n          })}\n        </div>\n      );\n    });\n\n    // Calling focus() on the radiogroup should focus on the selected option or first enabled option\n    useImperativeHandle(\n      ref,\n      () => ({\n        focus: () => {\n          let input: HTMLInputElement | null = rootRef.current?.querySelector(\n            \"input:not(:disabled):checked\"\n          ) || null;\n\n          if (!input) {\n            input = rootRef.current?.querySelector(\"input:not(:disabled)\") || null;\n          }\n\n          if (input) {\n            input.focus();\n          }\n        },\n      }),\n      []\n    );\n\n    return (\n      <div ref={rootRef} role=\"radiogroup\" {...rest}>\n        {clones}\n      </div>\n    );\n  }\n);\n\nif (__DEV__) {\n  RadioGroup.displayName = \"RadioGroup\";\n}"],"file":"radio-group.js"}