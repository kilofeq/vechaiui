{"version":3,"sources":["../../src/radio.tsx"],"names":["useFormControl","cx","__DEV__","React","useRadioClass","useRadioLabelClass","Radio","forwardRef","props","ref","id","name","value","ariaLabel","ariaLabelledBy","ariaDescribedby","color","defaultChecked","checked","size","onChange","children","className","rest","disabled","invalid","radioClasses","radioLabelClasses","undefined","displayName"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,iBAA/B;AACA,SAASC,EAAT,EAAaC,OAAb,QAA4B,iBAA5B;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,UAAlD;AAuDA,OAAO,IAAMC,KAAK,gBAAGH,KAAK,CAACI,UAAN,CAA+C,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAClF,MAAM;AACJC,IAAAA,EADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,KAHI;AAIJ,kBAAcC,SAJV;AAKJ,uBAAmBC,cALf;AAMJ,wBAAoBC,eANhB;AAOJC,IAAAA,KAAK,GAAG,SAPJ;AAQJC,IAAAA,cARI;AASJC,IAAAA,OATI;AAUJC,IAAAA,IAAI,GAAG,IAVH;AAWJC,IAAAA,QAXI;AAYJC,IAAAA,QAZI;AAaJC,IAAAA;AAbI,MAeFd,KAfJ;AAAA,MAcKe,IAdL,iCAeIf,KAfJ;;AAiBA,MAAM;AACJgB,IAAAA,QADI;AAEJC,IAAAA;AAFI,MAGFzB,cAAc,CAACQ,KAAD,CAHlB;AAKA,MAAMkB,YAAY,GAAGtB,aAAa,CAAC;AACjCe,IAAAA,IADiC;AAEjCK,IAAAA,QAFiC;AAGjCR,IAAAA;AAHiC,GAAD,CAAlC;AAMA,MAAMW,iBAAiB,GAAGtB,kBAAkB,CAAC;AAAEc,IAAAA;AAAF,GAAD,CAA5C;AAEA,sBACE;AACE,IAAA,SAAS,EAAElB,EAAE,CACX,oCADW,EAEXuB,QAAQ,IAAI,oBAFD;AADf,kBAME;AACE,IAAA,IAAI,EAAC,OADP;AAEE,kBAAYX,SAFd;AAGE,uBAAiBC,cAHnB;AAIE,wBAAkBC,eAJpB;AAKE,IAAA,EAAE,EAAEL,EALN;AAME,IAAA,GAAG,EAAED,GANP;AAOE,IAAA,IAAI,EAAEE,IAPR;AAQE,IAAA,KAAK,EAAEC,KART;AASE,oBAAca,OAThB;AAUE,IAAA,cAAc,EAAER,cAVlB;AAWE,IAAA,QAAQ,EAAEG,QAXZ;AAYE,IAAA,OAAO,EAAEF,OAZX;AAaE,IAAA,QAAQ,EAAEM,QAbZ;AAcE,qBAAeA,QAdjB;AAeE,kBAAYR,KAAK,GAAGA,KAAH,GAAWY,SAf9B;AAgBE,IAAA,SAAS,EAAE3B,EAAE,CACXyB,YADW,EAEXF,QAAQ,GAAG,YAAH,GAAkB,aAFf,EAGXF,SAHW;AAhBf,KAqBMC,IArBN,EANF,EA6BGF,QAAQ,iBACP;AACE,IAAA,SAAS,EAAEpB,EAAE,CACX0B,iBADW,EAEXH,QAAQ,GAAG,YAAH,GAAkB,aAFf;AADf,KAMGH,QANH,CA9BJ,CADF;AA0CD,CAzEoB,CAAd;;AA2EP,IAAInB,OAAJ,EAAa;AACXI,EAAAA,KAAK,CAACuB,WAAN,GAAoB,OAApB;AACD","sourcesContent":["import { useFormControl } from \"@vechaiui/forms\";\nimport { cx, __DEV__ } from \"@vechaiui/utils\";\nimport { DefaultProps } from \"@vechaiui/theme\";\nimport * as React from \"react\";\n\nimport { useRadioClass, useRadioLabelClass } from \"./styles\";\n\ninterface IRadioProps<T = HTMLInputElement> extends DefaultProps {\n  /* Makes radio disabled */\n  disabled?: React.InputHTMLAttributes<T>[\"disabled\"];\n  /* Makes radio invalid */\n  invalid?: boolean;\n  /* Makes radio required */\n  required?: React.InputHTMLAttributes<T>[\"required\"];\n  /* Makes radio readOnly */\n  readOnly?: React.InputHTMLAttributes<T>[\"readOnly\"];\n  /**\n   * If `true`, the radio will be initially checked.\n   */\n  defaultChecked?: boolean;\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update it's value (since it's now controlled)\n   */\n  checked?: boolean;\n  /**\n   * The callback invoked when the checked state of the `radio` changes..\n   */\n  onChange?: React.ChangeEventHandler<HTMLInputElement>;\n  /* Radio id */\n  id?: string;\n  /* Radio name */\n  name?: string;\n  /* Radio value */\n  value?: string | number;\n  /* Size of the radio */\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n  /* Set the radio color */\n  color?: string;\n  /**\n   * A11y: A label that describes the input\n   */\n  \"aria-label\"?: string;\n  /**\n   * A11y: The id of the element that describes the input\n   */\n  \"aria-describedby\"?: string;\n  /**\n   * A11y: Refers to the id of the element that labels the radio element.\n   */\n  \"aria-labelledby\"?: string;\n  /**\n   * The children is the label to be displayed to the right of the radio.\n   */\n  children?: React.ReactNode;\n}\n\nexport type RadioProps = IRadioProps &\n  React.HTMLAttributes<HTMLInputElement>;\n\nexport const Radio = React.forwardRef<HTMLInputElement, RadioProps>((props, ref) => {\n  const {\n    id,\n    name,\n    value,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedby,\n    color = \"primary\",\n    defaultChecked,\n    checked,\n    size = \"md\",\n    onChange,\n    children,\n    className,\n    ...rest\n  } = props;\n\n  const {\n    disabled,\n    invalid,\n  } = useFormControl(props);\n\n  const radioClasses = useRadioClass({\n    size,\n    disabled,\n    color,\n  });\n\n  const radioLabelClasses = useRadioLabelClass({ size });\n\n  return (\n    <label\n      className={cx(\n        \"inline-flex align-top items-center\",\n        disabled && \"cursor-not-allowed\"\n      )}\n    >\n      <input\n        type=\"radio\"\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={ariaDescribedby}\n        id={id}\n        ref={ref}\n        name={name}\n        value={value}\n        aria-invalid={invalid}\n        defaultChecked={defaultChecked}\n        onChange={onChange}\n        checked={checked}\n        disabled={disabled}\n        aria-disabled={disabled}\n        data-color={color ? color : undefined}\n        className={cx(\n          radioClasses,\n          disabled ? \"opacity-80\" : \"opacity-100\",\n          className\n        )}\n        {...rest}\n      />\n      {children && (\n        <span\n          className={cx(\n            radioLabelClasses,\n            disabled ? \"opacity-40\" : \"opacity-100\"\n          )}\n        >\n          {children}\n        </span>\n      )}\n    </label>\n  );\n});\n\nif (__DEV__) {\n  Radio.displayName = \"Radio\";\n}\n"],"file":"radio.js"}