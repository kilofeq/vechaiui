{"version":3,"sources":["../../src/avatar.tsx"],"names":["useImage","cx","__DEV__","React","useAvatarClass","useAvatarNameClass","getInitials","name","firstName","lastName","split","charAt","AvatarName","isFullName","className","size","props","avatarNameClasses","displayName","DefaultAvatar","sizes","xs","sm","md","lg","xl","full","baseSizes","Avatar","forwardRef","ref","bordered","src","children","style","onError","rest","classes","status","hasLoaded","sizeKey","_size","fontSize","renderChildren","lineHeight"],"mappings":";;;;;;;;AAAA,SAASA,QAAT,QAAyB,iBAAzB;AAEA,SAASC,EAAT,EAAaC,OAAb,QAA4B,iBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SAASC,cAAT,EAAyBC,kBAAzB,QAAmD,UAAnD;;AAyBA,IAAMC,WAAW,GAAIC,IAAD,IAAkB;AACpC,MAAI,CAACC,SAAD,EAAYC,QAAZ,IAAwBF,IAAI,CAACG,KAAL,CAAW,GAAX,CAA5B;;AAEA,MAAIF,SAAS,IAAIC,QAAjB,EAA2B;AACzB,gBAAUD,SAAS,CAACG,MAAV,CAAiB,CAAjB,CAAV,GAAgCF,QAAQ,CAACE,MAAT,CAAgB,CAAhB,CAAhC;AACD,GAFD,MAEO;AACL,WAAOH,SAAS,CAACG,MAAV,CAAiB,CAAjB,CAAP;AACD;AACF,CARD;;AAiBA,IAAMC,UAAU,GAAG,QAMI;AAAA,MANH;AAClBL,IAAAA,IADkB;AAElBM,IAAAA,UAFkB;AAGlBC,IAAAA,SAHkB;AAIlBC,IAAAA;AAJkB,GAMG;AAAA,MADlBC,KACkB;;AACrB,MAAMC,iBAAiB,GAAGZ,kBAAkB,CAAC;AAAEU,IAAAA;AAAF,GAAD,CAA5C;AACA,sBACE;AACE,IAAA,SAAS,EAAEd,EAAE,CAACgB,iBAAD,EAAoBH,SAApB,CADf;AAEE,kBAAYP;AAFd,KAGMS,KAHN,GAKGT,IAAI,GAAIM,UAAU,GAAGN,IAAH,GAAUD,WAAW,CAACC,IAAD,CAAnC,GAA6C,IALpD,CADF;AASD,CAjBD;;AAmBA,IAAIL,OAAJ,EAAa;AACXU,EAAAA,UAAU,CAACM,WAAX,GAAyB,YAAzB;AACD;;AAOD,IAAMC,aAAa,GAAG;AAAA,MAAC;AAAEL,IAAAA;AAAF,GAAD;AAAA,MAAiBE,KAAjB;;AAAA,sBACpB;AAAK,IAAA,SAAS,EAAEf,EAAE,CAAC,eAAD,EAAkBa,SAAlB;AAAlB,KAAoDE,KAApD,gBACE;AAAK,IAAA,IAAI,EAAC,MAAV;AAAiB,IAAA,OAAO,EAAC,aAAzB;AAAuC,IAAA,IAAI,EAAC;AAA5C,kBACE,4CACE;AAAM,IAAA,CAAC,EAAC;AAAR,IADF,eAEE;AAAM,IAAA,CAAC,EAAC;AAAR,IAFF,CADF,CADF,CADoB;AAAA,CAAtB;;AAWA,IAAId,OAAJ,EAAa;AACXiB,EAAAA,aAAa,CAACD,WAAd,GAA4B,eAA5B;AACD;;AAED,IAAME,KAAK,GAAG;AACZ,SAAO,CADK;AAEZC,EAAAA,EAAE,EAAE,CAFQ;AAGZC,EAAAA,EAAE,EAAE,CAHQ;AAIZC,EAAAA,EAAE,EAAE,CAJQ;AAKZC,EAAAA,EAAE,EAAE,CALQ;AAMZC,EAAAA,EAAE,EAAE,EANQ;AAOZ,SAAO,EAPK;AAQZ,SAAO,EARK;AASZC,EAAAA,IAAI,EAAE;AATM,CAAd;AAYA,IAAMC,SAAS,GAAG;AAChB,KAAG,MADa;AAEhB,KAAG,SAFa;AAGhB,KAAG,QAHa;AAIhB,KAAG,SAJa;AAKhB,KAAG,MALa;AAMhB,MAAI,QANY;AAOhB,MAAI,MAPY;AAQhB,MAAI;AARY,CAAlB;AAiBA,OAAO,IAAMC,MAAM,gBAAGzB,KAAK,CAAC0B,UAAN,CACpB,CACEb,KADF,EAEEc,GAFF,KAGK;AACH,MAAM;AACJf,IAAAA,IAAI,GAAG,IADH;AAEJgB,IAAAA,QAFI;AAGJxB,IAAAA,IAHI;AAIJM,IAAAA,UAJI;AAKJmB,IAAAA,GALI;AAMJC,IAAAA,QANI;AAOJnB,IAAAA,SAPI;AAQJoB,IAAAA,KARI;AASJC,IAAAA;AATI,MAWFnB,KAXJ;AAAA,MAUKoB,IAVL,iCAWIpB,KAXJ;;AAaA,MAAMqB,OAAO,GAAGjC,cAAc,CAAC;AAC7BW,IAAAA,IAD6B;AAE7BgB,IAAAA;AAF6B,GAAD,CAA9B;AAKA,MAAMO,MAAM,GAAGtC,QAAQ,CAAC;AAAEgC,IAAAA,GAAF;AAAOG,IAAAA;AAAP,GAAD,CAAvB;AACA,MAAMI,SAAS,GAAGD,MAAM,KAAK,QAA7B;AAEA,MAAME,OAAO,GAAGpB,KAAK,CAACL,IAAD,CAArB;AACA,MAAM0B,KAAK,GAAGd,SAAS,CAACa,OAAD,CAAvB;AACA,MAAME,QAAQ,aAAWD,KAAX,YAAd;;AAEA,MAAME,cAAc,GAAG,MAAM;AAC3B,QAAIX,GAAG,IAAIO,SAAX,EAAsB;AACpB,0BACE;AACE,QAAA,SAAS,EAAC,yCADZ;AAEE,QAAA,GAAG,EAAEP,GAFP;AAGE,QAAA,GAAG,EAAEzB;AAHP,QADF;AAOD;;AAED,QAAIyB,GAAG,IAAI,CAACO,SAAZ,EAAuB;AACrB,UAAIhC,IAAJ,EAAU;AACR,4BAAO,oBAAC,UAAD;AAAY,UAAA,IAAI,EAAEQ,IAAlB;AAAwB,UAAA,IAAI,EAAER,IAA9B;AAAoC,UAAA,UAAU,EAAEM;AAAhD,UAAP;AACD,OAFD,MAEO;AACL,4BAAO,oBAAC,aAAD;AAAe,wBAAYN;AAA3B,UAAP;AACD;AACF;;AAED,QAAI,CAACyB,GAAD,IAAQzB,IAAZ,EAAkB;AAChB,0BAAO,oBAAC,UAAD;AAAY,QAAA,IAAI,EAAEQ,IAAlB;AAAwB,QAAA,IAAI,EAAER,IAA9B;AAAoC,QAAA,UAAU,EAAEM;AAAhD,QAAP;AACD;;AAED,wBAAO,oBAAC,aAAD;AAAe,oBAAYN;AAA3B,MAAP;AACD,GAxBD;;AA0BA,sBACE;AACE,IAAA,GAAG,EAAEuB,GADP;AAEE,IAAA,SAAS,EAAE7B,EAAE,CAACoC,OAAD,EAAUvB,SAAV,CAFf;AAGE,IAAA,KAAK;AACH4B,MAAAA,QADG;AAEHE,MAAAA,UAAU,EAAEH;AAFT,OAGAP,KAHA;AAHP,KAQME,IARN,GAUGO,cAAc,EAVjB,EAWGV,QAXH,CADF;AAeD,CAvEmB,CAAf;;AA0EP,IAAI/B,OAAJ,EAAa;AACX0B,EAAAA,MAAM,CAACV,WAAP,GAAqB,QAArB;AACD","sourcesContent":["import { useImage } from \"@vechaiui/image\";\nimport { DefaultProps } from \"@vechaiui/theme\";\nimport { cx, __DEV__ } from \"@vechaiui/utils\";\nimport * as React from \"react\";\n\nimport { useAvatarClass, useAvatarNameClass } from \"./styles\";\n\ninterface IAvatarProps extends DefaultProps {\n  /* The name of the person in the avatar. */\n  name?: string;\n  /* The border around of the avatar. */\n  bordered?: boolean;\n  /* The badge at the bottom right corner of the avatar. */\n  children?: React.ReactNode;\n  /* The image url of the `Avatar` */\n  src?: string;\n  /* The image set url of the `Avatar` */\n  srcSet?: string;\n  /* Defines loading strategy */\n  loading?: \"eager\" | \"lazy\";\n  /* Function called when image failed to load */\n  onError?: () => void;\n  /* Function to get the initials to display */\n  getInitials?: (name: string) => string;\n  /* */\n  isFullName?: boolean;\n  /* The size of the avatar. */\n  size?: \"2xs\" | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | \"3xl\" | \"full\";\n}\n\nconst getInitials = (name: string) => {\n  let [firstName, lastName] = name.split(\" \");\n\n  if (firstName && lastName) {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`;\n  } else {\n    return firstName.charAt(0);\n  }\n};\n\ninterface AvatarNameProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    Pick<\n      IAvatarProps,\n      \"name\" | \"getInitials\" | \"isFullName\" | \"size\" | \"className\"\n    > {}\n\nconst AvatarName = ({\n  name,\n  isFullName,\n  className,\n  size,\n  ...props\n}: AvatarNameProps) => {\n  const avatarNameClasses = useAvatarNameClass({ size });\n  return (\n    <div\n      className={cx(avatarNameClasses, className)}\n      aria-label={name}\n      {...props}\n    >\n      {name ? (isFullName ? name : getInitials(name)) : null}\n    </div>\n  );\n};\n\nif (__DEV__) {\n  AvatarName.displayName = \"AvatarName\";\n}\n\ninterface DefaultAvatarProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  \"aria-label\"?: string;\n}\n\nconst DefaultAvatar = ({ className, ...props }: DefaultAvatarProps) => (\n  <div className={cx(\"w-full h-full\", className)} {...props}>\n    <svg fill=\"#fff\" viewBox=\"0 0 128 128\" role=\"img\">\n      <g>\n        <path d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\" />\n        <path d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\" />\n      </g>\n    </svg>\n  </div>\n);\n\nif (__DEV__) {\n  DefaultAvatar.displayName = \"DefaultAvatar\";\n}\n\nconst sizes = {\n  \"2xs\": 4,\n  xs: 5,\n  sm: 6,\n  md: 7,\n  lg: 8,\n  xl: 10,\n  \"2xl\": 12,\n  \"3xl\": 16,\n  full: \"full\",\n};\n\nconst baseSizes = {\n  4: \"1rem\",\n  5: \"1.25rem\",\n  6: \"1.5rem\",\n  7: \"1.75rem\",\n  8: \"2rem\",\n  10: \"2.5rem\",\n  12: \"3rem\",\n  16: \"4rem\",\n};\n\nexport interface AvatarProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"onError\">,\n    IAvatarProps {\n  iconLabel?: string;\n}\n\nexport const Avatar = React.forwardRef<HTMLDivElement, AvatarProps>(\n  (\n    props,\n    ref\n  ) => {\n    const {\n      size = \"md\",\n      bordered,\n      name,\n      isFullName,\n      src,\n      children,\n      className,\n      style,\n      onError,\n      ...rest\n    } = props;\n\n    const classes = useAvatarClass({\n      size,\n      bordered,\n    });\n\n    const status = useImage({ src, onError });\n    const hasLoaded = status === \"loaded\";\n\n    const sizeKey = sizes[size];\n    const _size = baseSizes[sizeKey];\n    const fontSize = `calc(${_size} / 2.5)`;\n\n    const renderChildren = () => {\n      if (src && hasLoaded) {\n        return (\n          <img\n            className=\"object-cover w-full h-full rounded-full\"\n            src={src}\n            alt={name}\n          />\n        );\n      }\n\n      if (src && !hasLoaded) {\n        if (name) {\n          return <AvatarName size={size} name={name} isFullName={isFullName} />;\n        } else {\n          return <DefaultAvatar aria-label={name} />;\n        }\n      }\n\n      if (!src && name) {\n        return <AvatarName size={size} name={name} isFullName={isFullName} />;\n      }\n\n      return <DefaultAvatar aria-label={name} />;\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cx(classes, className)}\n        style={{\n          fontSize,\n          lineHeight: _size,\n          ...style,\n        }}\n        {...rest}\n      >\n        {renderChildren()}\n        {children}\n      </div>\n    );\n  }\n);\n\nif (__DEV__) {\n  Avatar.displayName = \"Avatar\";\n}"],"file":"avatar.js"}