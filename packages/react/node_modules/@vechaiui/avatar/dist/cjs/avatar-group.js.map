{"version":3,"sources":["../../src/avatar-group.tsx"],"names":["AvatarGroup","size","children","max","className","rest","validChildren","childrenWithinMax","slice","excess","length","reversedChildren","reverse","clones","map","child","index","isFirstAvatar","React","cloneElement","props","bordered","__DEV__","displayName"],"mappings":";;;;;AACA;;AACA;;AAEA;;;;;;;;;;;;AAmBO,IAAMA,WAAuC,GAAG,SAA1CA,WAA0C,OAMjD;AAAA,MALJC,IAKI,QALJA,IAKI;AAAA,MAJJC,QAII,QAJJA,QAII;AAAA,MAHJC,GAGI,QAHJA,GAGI;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,MADDC,IACC;;AACJ,MAAMC,aAAa,GAAG,6BAAiBJ,QAAjB,CAAtB;AAEA;AACF;AACA;;AACE,MAAMK,iBAAiB,GAAGJ,GAAG,GAAGG,aAAa,CAACE,KAAd,CAAoB,CAApB,EAAuBL,GAAvB,CAAH,GAAiCG,aAA9D;AAEA;AACF;AACA;;AACE,MAAMG,MAAM,GAAGN,GAAG,IAAI,IAAP,IAAeG,aAAa,CAACI,MAAd,GAAuBP,GAArD;AAEA;AACF;AACA;AACA;;AACE,MAAMQ,gBAAgB,GAAGJ,iBAAiB,CAACK,OAAlB,EAAzB;AAEA,MAAMC,MAAM,GAAGF,gBAAgB,CAACG,GAAjB,CAAqB,UAACC,KAAD,EAAQC,KAAR,EAAkB;AACpD,QAAIC,aAAa,GAAGD,KAAK,KAAK,CAA9B;AACA,wBAAOE,KAAK,CAACC,YAAN,CAAmBJ,KAAnB,EAA0B;AAC/Bd,MAAAA,IAAI,EAAJA,IAD+B;AAE/BG,MAAAA,SAAS,EAAE,eAAGW,KAAK,CAACK,KAAN,CAAYhB,SAAf,EAA0Ba,aAAa,GAAG,MAAH,GAAY,OAAnD,CAFoB;AAG/BI,MAAAA,QAAQ,EAAE;AAHqB,KAA1B,CAAP;AAKD,GAPc,CAAf;AASA,sBACE;AAAK,IAAA,IAAI,EAAC,OAAV;AAAkB,IAAA,SAAS,EAAE,eAAG,cAAH,EAAmBjB,SAAnB;AAA7B,KAAgEC,IAAhE,GACGI,MAAM,GAAG,CAAT,iBACC,oBAAC,cAAD;AACE,IAAA,IAAI,EAAER,IADR;AAEE,IAAA,IAAI,QAAMQ,MAFZ;AAGE,IAAA,SAAS,EAAC,OAHZ;AAIE,IAAA,UAAU,MAJZ;AAKE,IAAA,QAAQ;AALV,IAFJ,EAUGI,MAVH,CADF;AAcD,CAhDM;;;;AAkDP,IAAIS,cAAJ,EAAa;AACXtB,EAAAA,WAAW,CAACuB,WAAZ,GAA0B,aAA1B;AACD","sourcesContent":["import { DefaultProps } from \"@vechaiui/theme\";\nimport { cx, getValidChildren, __DEV__ } from \"@vechaiui/utils\";\nimport * as React from \"react\";\n\nimport { Avatar, AvatarProps } from \"./avatar\";\n\ninterface IAvatarGroupProps extends DefaultProps {\n  /**\n   * The children of the avatar group.\n   */\n  children: React.ReactNode;\n  /**\n   * The maximum number of visible avatars\n   */\n  max?: number;\n  /* Set all wrapped avatar size */\n  size?: AvatarProps[\"size\"];\n}\n\nexport interface AvatarGroupProps\n  extends IAvatarGroupProps,\n    Omit<React.HTMLAttributes<HTMLDivElement>, \"children\"> {}\n\nexport const AvatarGroup: React.FC<AvatarGroupProps> = ({\n  size,\n  children,\n  max,\n  className,\n  ...rest\n}) => {\n  const validChildren = getValidChildren(children);\n\n  /**\n   * get the avatars within the max\n   */\n  const childrenWithinMax = max ? validChildren.slice(0, max) : validChildren;\n\n  /**\n   * get the remaining avatar count\n   */\n  const excess = max != null && validChildren.length - max;\n\n  /**\n   * Reversing the children is a great way to avoid using zIndex\n   * to overlap the avatars\n   */\n  const reversedChildren = childrenWithinMax.reverse();\n\n  const clones = reversedChildren.map((child, index) => {\n    let isFirstAvatar = index === 0;\n    return React.cloneElement(child, {\n      size,\n      className: cx(child.props.className, isFirstAvatar ? \"mr-0\" : \"-mr-3\"),\n      bordered: true,\n    });\n  });\n\n  return (\n    <div role=\"group\" className={cx(\"avatar-group\", className)} {...rest}>\n      {excess > 0 && (\n        <Avatar\n          size={size}\n          name={`+${excess}`}\n          className=\"-ml-3\"\n          isFullName\n          bordered\n        />\n      )}\n      {clones}\n    </div>\n  );\n};\n\nif (__DEV__) {\n  AvatarGroup.displayName = \"AvatarGroup\";\n}\n"],"file":"avatar-group.js"}