{"version":3,"sources":["../../../src/input-group/index.tsx"],"names":["inputSizes","xl","lg","md","sm","xs","plSizes","prSizes","InputGroup","React","forwardRef","props","ref","children","className","size","rest","height","pl","pr","rl","rr","validChildren","forEach","child","type","InputLeftElement","InputRightElement","InputLeftAddon","InputRightAddon","map","Input","cloneElement","__DEV__","displayName"],"mappings":";;;;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;AAaA,IAAMA,UAAU,GAAG;AACjBC,EAAAA,EAAE,EAAE,IADa;AAEjBC,EAAAA,EAAE,EAAE,IAFa;AAGjBC,EAAAA,EAAE,EAAE,GAHa;AAIjBC,EAAAA,EAAE,EAAE,GAJa;AAKjBC,EAAAA,EAAE,EAAE;AALa,CAAnB;AAQA,IAAMC,OAAO,GAAG;AACd,MAAI,OADU;AAEd,MAAI,OAFU;AAGd,KAAG,MAHW;AAId,KAAG,MAJW;AAKd,KAAG;AALW,CAAhB;AAQA,IAAMC,OAAO,GAAG;AACd,MAAI,OADU;AAEd,MAAI,OAFU;AAGd,KAAG,MAHW;AAId,KAAG,MAJW;AAKd,KAAG;AALW,CAAhB;AAQO,IAAMC,UAAU,gBAAGC,KAAK,CAACC,UAAN,CACxB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACd,MAAQC,QAAR,GAAsDF,KAAtD,CAAQE,QAAR;AAAA,MAAkBC,SAAlB,GAAsDH,KAAtD,CAAkBG,SAAlB;AAAA,oBAAsDH,KAAtD,CAA6BI,IAA7B;AAAA,MAA6BA,IAA7B,4BAAoC,IAApC;AAAA,MAA6CC,IAA7C,iCAAsDL,KAAtD;;AACA,MAAMM,MAAM,GAAGjB,UAAU,CAACe,IAAD,CAAzB;AACA,MAAIG,EAAJ;AACA,MAAIC,EAAJ;AAEA,MAAIC,EAAJ;AACA,MAAIC,EAAJ;AAEA,MAAMC,aAAa,GAAG,6BAAiBT,QAAjB,CAAtB;AAEAS,EAAAA,aAAa,CAACC,OAAd,CAAsB,UAACC,KAAD,EAAW;AAC/B,QAAIA,KAAK,CAACC,IAAN,KAAeC,8BAAnB,EAAqC;AACnCR,MAAAA,EAAE,GAAGZ,OAAO,CAACW,MAAD,CAAZ;AACD;;AACD,QAAIO,KAAK,CAACC,IAAN,KAAeE,+BAAnB,EAAsC;AACpCR,MAAAA,EAAE,GAAGZ,OAAO,CAACU,MAAD,CAAZ;AACD;;AAED,QAAIO,KAAK,CAACC,IAAN,KAAeG,0BAAnB,EAAmC;AACjCR,MAAAA,EAAE,GAAG,gBAAL;AACD;;AACD,QAAII,KAAK,CAACC,IAAN,KAAeI,2BAAnB,EAAoC;AAClCR,MAAAA,EAAE,GAAG,gBAAL;AACD;AACF,GAdD;AAgBA,sBACE;AACE,IAAA,GAAG,EAAET,GADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,SAAS,EAAE,eAAG,kBAAH,EAAuBE,SAAvB;AAHb,KAIME,IAJN,GAMGM,aAAa,CAACQ,GAAd,CAAkB,UAACN,KAAD,EAAW;AAC5B,QAAIA,KAAK,CAACC,IAAN,KAAeM,YAAnB,EAA0B;AACxB,0BAAOtB,KAAK,CAACuB,YAAN,CAAmBR,KAAnB,EAA0B;AAC/BT,QAAAA,IAAI,EAAJA,IAD+B;AAE/BD,QAAAA,SAAS,EAAE,eAAGI,EAAH,EAAOC,EAAP,EAAWC,EAAX,EAAeC,EAAf,EAAmBG,KAAK,CAACb,KAAN,CAAYG,SAA/B;AAFoB,OAA1B,CAAP;AAID;;AACD,wBAAOL,KAAK,CAACuB,YAAN,CAAmBR,KAAnB,EAA0B;AAAET,MAAAA,IAAI,EAAJA;AAAF,KAA1B,CAAP;AACD,GARA,CANH,CADF;AAkBD,CA9CuB,CAAnB;;;AAiDP,IAAIkB,cAAJ,EAAa;AACXzB,EAAAA,UAAU,CAAC0B,WAAX,GAAyB,YAAzB;AACD","sourcesContent":["import { DefaultProps } from \"@vechaiui/theme\";\nimport { cx, getValidChildren, __DEV__ } from \"@vechaiui/utils\";\nimport * as React from \"react\";\n\nimport { Input, InputProps } from \"../input/input\";\nimport { InputLeftElement, InputRightElement } from \"../input-element\";\nimport { InputLeftAddon, InputRightAddon } from \"../input-addon\";\n\ninterface IInputGroupProps extends DefaultProps {\n  /* Size of all wrapped input */\n  size?: InputProps[\"size\"];\n  /* React node */\n  children?: React.ReactNode;\n}\n\nexport interface InputGroupProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    IInputGroupProps {}\n\nconst inputSizes = {\n  xl: \"12\",\n  lg: \"10\",\n  md: \"8\",\n  sm: \"7\",\n  xs: \"6\",\n};\n\nconst plSizes = {\n  12: \"pl-12\",\n  10: \"pl-10\",\n  8: \"pl-8\",\n  7: \"pl-7\",\n  6: \"pl-6\",\n};\n\nconst prSizes = {\n  12: \"pr-12\",\n  10: \"pr-10\",\n  8: \"pr-8\",\n  7: \"pr-7\",\n  6: \"pr-6\",\n};\n\nexport const InputGroup = React.forwardRef<HTMLDivElement, InputGroupProps>(\n  (props, ref) => {\n    const { children, className, size = \"md\", ...rest } = props;\n    const height = inputSizes[size];\n    let pl: string | undefined;\n    let pr: string | undefined;\n\n    let rl: string | undefined;\n    let rr: string | undefined;\n\n    const validChildren = getValidChildren(children);\n\n    validChildren.forEach((child) => {\n      if (child.type === InputLeftElement) {\n        pl = plSizes[height];\n      }\n      if (child.type === InputRightElement) {\n        pr = prSizes[height];\n      }\n\n      if (child.type === InputLeftAddon) {\n        rl = \"rounded-l-none\";\n      }\n      if (child.type === InputRightAddon) {\n        rr = \"rounded-r-none\";\n      }\n    });\n\n    return (\n      <div\n        ref={ref}\n        role=\"group\"\n        className={cx(\"form-input-group\", className)}\n        {...rest}\n      >\n        {validChildren.map((child) => {\n          if (child.type === Input) {\n            return React.cloneElement(child, {\n              size,\n              className: cx(pl, pr, rl, rr, child.props.className),\n            });\n          }\n          return React.cloneElement(child, { size });\n        })}\n      </div>\n    );\n  }\n);\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\";\n}\n"],"file":"index.js"}