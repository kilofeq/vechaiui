{"version":3,"sources":["../../../src/create-theme-vars/create-theme-vars.ts"],"names":["createThemeVars","target","options","context","cssMap","cssVars","value","path","firstKey","handler","tokenHandlerMap","defaultHandler","Object","assign","keys","lookupKey","join","varKey","undefined","cssVarPrefix","variable","reference","varRef"],"mappings":";;;;;AAAA;;AAGA;;AAWO,SAASA,eAAT,CAAyBC,MAAzB,EAAuCC,OAAvC,EAAwE;AAC7E,MAAMC,OAAkB,GAAG;AACzBC,IAAAA,MAAM,EAAE,EADiB;AAEzBC,IAAAA,OAAO,EAAE;AAFgB,GAA3B;AAKA,yBAAWJ,MAAX,EAAmB,UAACK,KAAD,EAAQC,IAAR,EAAiB;AAAA;;AAClC;AACA,QAAOC,QAAP,GAAmBD,IAAnB;AAEA,QAAME,OAAO,4BAAGC,eAAe,CAACF,QAAD,CAAlB,oCAAgCE,eAAe,CAACC,cAA7D;;AAEA,mBAA4BF,OAAO,CAACF,IAAD,EAAOD,KAAP,EAAcJ,OAAd,CAAnC;AAAA,QAAQG,OAAR,YAAQA,OAAR;AAAA,QAAiBD,MAAjB,YAAiBA,MAAjB;;AACAQ,IAAAA,MAAM,CAACC,MAAP,CAAcV,OAAO,CAACE,OAAtB,EAA+BA,OAA/B;AACAO,IAAAA,MAAM,CAACC,MAAP,CAAcV,OAAO,CAACC,MAAtB,EAA8BA,MAA9B;AACD,GATD;AAWA,SAAOD,OAAP;AACD;;AAQD;AACA;AACA;AACA,IAAMO,eAEL,GAAG;AACFC,EAAAA,cAAc,EAAE,wBAACG,IAAD,EAAOR,KAAP,EAAcJ,OAAd,EAA0B;AAAA;;AACxC,QAAMa,SAAS,GAAGD,IAAI,CAACE,IAAL,CAAU,GAAV,CAAlB;AACA,QAAMC,MAAM,GAAGH,IAAI,CAACE,IAAL,CAAU,GAAV,CAAf;;AAEA,kBAAgC,qBAC9BC,MAD8B,EAE9BC,SAF8B,EAG9BhB,OAAO,CAACiB,YAHsB,CAAhC;AAAA,QAAQC,QAAR,WAAQA,QAAR;AAAA,QAAkBC,SAAlB,WAAkBA,SAAlB;;AAMA,WAAO;AACLhB,MAAAA,OAAO,2BACJe,QADI,IACOd,KADP,WADF;AAILF,MAAAA,MAAM,yBACHW,SADG,IACS;AACXT,QAAAA,KAAK,EAALA,KADW;AAEX,eAAKc,QAFM;AAGXE,QAAAA,MAAM,EAAED;AAHG,OADT;AAJD,KAAP;AAYD;AAvBC,CAFJ","sourcesContent":["import { Dict, walkObject } from \"@vechaiui/utils\";\n\nimport { ThemeScale } from \"./theme-tokens\";\nimport { cssVar } from \"./css-var\";\n\nexport interface CreateThemeVarsOptions {\n  cssVarPrefix?: string;\n}\n\nexport interface ThemeVars {\n  cssVars: Dict;\n  cssMap: Dict;\n}\n\nexport function createThemeVars(target: Dict, options: CreateThemeVarsOptions) {\n  const context: ThemeVars = {\n    cssMap: {},\n    cssVars: {},\n  };\n\n  walkObject(target, (value, path) => {\n    // firstKey will be e.g. \"space\"\n    const [firstKey] = path;\n\n    const handler = tokenHandlerMap[firstKey] ?? tokenHandlerMap.defaultHandler;\n\n    const { cssVars, cssMap } = handler(path, value, options);\n    Object.assign(context.cssVars, cssVars);\n    Object.assign(context.cssMap, cssMap);\n  });\n\n  return context;\n}\n\ntype TokenHandler = (\n  keys: string[],\n  value: unknown | { reference: string },\n  options: CreateThemeVarsOptions\n) => ThemeVars;\n\n/**\n * Define transformation handlers for ThemeScale\n */\nconst tokenHandlerMap: Partial<Record<ThemeScale, TokenHandler>> & {\n  defaultHandler: TokenHandler;\n} = {\n  defaultHandler: (keys, value, options) => {\n    const lookupKey = keys.join(\".\");\n    const varKey = keys.join(\"-\");\n\n    const { variable, reference } = cssVar(\n      varKey,\n      undefined,\n      options.cssVarPrefix\n    );\n\n    return {\n      cssVars: {\n        [variable]: value,\n      },\n      cssMap: {\n        [lookupKey]: {\n          value,\n          var: variable,\n          varRef: reference,\n        },\n      },\n    };\n  },\n};\n"],"file":"create-theme-vars.js"}