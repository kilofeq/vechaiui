{"version":3,"sources":["../../src/breadcrumb.tsx"],"names":["Link","cx","getValidChildren","__DEV__","React","cloneElement","BreadcrumbSeparator","forwardRef","ref","className","props","displayName","BreadcrumbLink","currentPage","Comp","undefined","BreadcrumbItem","separator","lastChild","addSeparator","children","rest","validChildren","clones","map","child","type","Breadcrumb","index","length"],"mappings":"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","sourcesContent":["import { Link, LinkProps } from \"@vechaiui/link\";\nimport { cx, getValidChildren, __DEV__ } from \"@vechaiui/utils\";\nimport { DefaultProps } from \"@vechaiui/theme\";\nimport * as React from \"react\";\nimport { cloneElement } from \"react\";\n\nexport interface BreadcrumbSeparatorProps extends DefaultProps, React.HTMLAttributes<HTMLSpanElement> {\n  children?: React.ReactNode;\n}\n\nconst BreadcrumbSeparator = React.forwardRef<\n  HTMLSpanElement,\n  BreadcrumbSeparatorProps\n>(({ className, ...props }, ref) => {\n  return (\n    <span\n      ref={ref}\n      role=\"presentation\"\n      className={cx(\"breadcrumb-separator\", className)}\n      {...props}\n    />\n  );\n});\n\nif (__DEV__) {\n  BreadcrumbSeparator.displayName = \"BreadcrumbSeparator\";\n}\n\ninterface BreadcrumbLinkProps extends LinkProps {\n  /**\n   * If `true`, indicates that the breadcrumb item is active, adds\n   * `aria-current=page` and renders a `span`\n   */\n  currentPage?: boolean;\n}\n\nexport type { BreadcrumbLinkProps }\n\nconst BreadcrumbLink = React.forwardRef<any, any>(\n  ({ currentPage, ...props }, ref) => {\n    const Comp = currentPage ? \"span\" : Link;\n\n    return (\n      <Comp ref={ref} aria-current={currentPage ? \"page\" : undefined} {...props} />\n    );\n  }\n);\n\nif (__DEV__) {\n  BreadcrumbLink.displayName = \"BreadcrumbLink\";\n}\n\nexport interface BreadcrumbItemProps extends BreadcrumbProps {\n  /**\n   * If `true`, indicates that the breadcrumb item is active, adds\n   * `aria-current=page` and renders a `span`\n   */\n  currentPage?: boolean;\n  lastChild?: boolean;\n}\n\nconst BreadcrumbItem = React.forwardRef<HTMLLIElement, BreadcrumbItemProps>(\n  (props, ref) => {\n    const {\n      currentPage,\n      separator,\n      lastChild,\n      addSeparator,\n      children,\n      className,\n      ...rest\n    } = props;\n\n    const validChildren = getValidChildren(children);\n    const clones = validChildren.map((child) => {\n      if (child.type === BreadcrumbLink) {\n        return cloneElement(child, { currentPage });\n      }\n\n      if (child.type === BreadcrumbSeparator) {\n        return cloneElement(child, {\n          children: child.props.children || separator,\n        });\n      }\n\n      return child;\n    });\n\n    return (\n      <li ref={ref} className={cx(\"breadcrumb-item\", className)} {...rest}>\n        {clones}\n        {!lastChild && addSeparator && (\n          <BreadcrumbSeparator children={separator} />\n        )}\n      </li>\n    );\n  }\n);\n\ninterface IBreadcrumbProps extends DefaultProps {\n  /* The visual separator between each breadcrumb item */\n  separator?: string | React.ReactElement;\n  /* Add the breadcrumb separator automatically */\n  addSeparator?: boolean;\n  /* React Node */\n  children?: React.ReactNode;\n}\n\nexport interface BreadcrumbProps\n  extends React.HTMLAttributes<HTMLElement>,\n    IBreadcrumbProps {}\n\nconst Breadcrumb = React.forwardRef<HTMLElement, BreadcrumbProps>(\n  (props, ref) => {\n    const {\n      children,\n      addSeparator = true,\n      separator = \"/\",\n      className,\n      ...rest\n    } = props;\n    const validChildren = getValidChildren(children);\n    const clones = validChildren.map((child, index) => {\n      return cloneElement(child, {\n        addSeparator,\n        separator,\n        lastChild: validChildren.length === index + 1,\n      });\n    });\n\n    return (\n      <nav\n        ref={ref}\n        aria-label=\"breadcrumb\"\n        className={cx(\"breadcrumb\", className)}\n        {...rest}\n      >\n        <ol>{clones}</ol>\n      </nav>\n    );\n  }\n);\n\nif (__DEV__) {\n  Breadcrumb.displayName = \"Breadcrumb\";\n}\nexport { Breadcrumb, BreadcrumbLink, BreadcrumbItem, BreadcrumbSeparator };\n"],"file":"breadcrumb.js"}