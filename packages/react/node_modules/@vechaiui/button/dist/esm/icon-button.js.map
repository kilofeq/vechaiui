{"version":3,"sources":["../../src/icon-button.tsx"],"names":["cx","__DEV__","React","Button","IconButton","forwardRef","props","ref","icon","children","ariaLabel","className","rest","classes","element","_children","isValidElement","cloneElement","displayName"],"mappings":";;;;;;AAAA,SAASA,EAAT,EAAaC,OAAb,QAA4B,iBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SAASC,MAAT,QAAoC,UAApC;AAoBA,OAAO,IAAMC,UAAU,gBAAGF,KAAK,CAACG,UAAN,CACxB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACd,MAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,QAFI;AAGJ,kBAAcC,SAHV;AAIJC,IAAAA;AAJI,MAMFL,KANJ;AAAA,MAKKM,IALL,iCAMIN,KANJ;;AAQA,MAAMO,OAAO,GAAGb,EAAE,CAAC,UAAD,EAAaW,SAAb,CAAlB;AAEA;AACJ;AACA;;AACI,MAAMG,OAAO,GAAGN,IAAI,IAAIC,QAAxB;;AACA,MAAMM,SAAS,GAAG,aAAAb,KAAK,CAACc,cAAN,CAAqBF,OAArB,iBACdZ,KAAK,CAACe,YAAN,CAAmBH,OAAnB,EAAmC,EAAnC,CADc,GAEd,IAFJ;;AAIA,sBACE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAED,OAAnB;AAA4B,IAAA,GAAG,EAAEN,GAAjC;AAAsC,kBAAYG;AAAlD,KAAiEE,IAAjE,GACGG,SADH,CADF;AAKD,CAzBuB,CAAnB;;AA4BP,IAAId,OAAJ,EAAa;AACXG,EAAAA,UAAU,CAACc,WAAX,GAAyB,YAAzB;AACD","sourcesContent":["import { cx, __DEV__ } from \"@vechaiui/utils\";\nimport * as React from \"react\";\n\nimport { Button, ButtonProps } from \"./button\";\n\ntype OmittedProps = \"leftIcon\" | \"rightIcon\" | \"loadingText\";\n\ninterface IIconButtonProps extends Omit<ButtonProps, OmittedProps> {\n  /**\n   * The icon to be used in the button.\n   */\n  icon?: React.ReactElement;\n}\n\nexport interface IconButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement>,\n    IIconButtonProps {\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\"?: string;\n}\n\nexport const IconButton = React.forwardRef<HTMLButtonElement, IconButtonProps>(\n  (props, ref) => {\n    const {\n      icon,\n      children,\n      \"aria-label\": ariaLabel,\n      className,\n      ...rest\n    } = props;\n\n    const classes = cx(\"btn-icon\", className);\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children;\n    const _children = React.isValidElement(element)\n      ? React.cloneElement(element as any, {})\n      : null;\n\n    return (\n      <Button className={classes} ref={ref} aria-label={ariaLabel} {...rest}>\n        {_children}\n      </Button>\n    );\n  }\n);\n\nif (__DEV__) {\n  IconButton.displayName = \"IconButton\";\n}\n"],"file":"icon-button.js"}