{"version":3,"sources":["../../src/tag.tsx"],"names":["TagCloseButton","React","forwardRef","ref","disabled","className","iconClassName","props","XIcon","__DEV__","displayName","TagLabel","Tag","variant","size","color","rest","classes","undefined"],"mappings":";;;;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;AASA;AACO,IAAMA,cAAc,gBAAGC,KAAK,CAACC,UAAN,CAG5B,gBAAmDC,GAAnD;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,SAAb,QAAaA,SAAb;AAAA,MAAwBC,aAAxB,QAAwBA,aAAxB;AAAA,MAA0CC,KAA1C;;AAAA,sBACA;AACE,IAAA,GAAG,EAAEJ,GADP;AAEE,IAAA,SAAS,EAAE,eAAG,kBAAH,EAAuBE,SAAvB,CAFb;AAGE,IAAA,QAAQ,EAAED,QAHZ;AAIE,qBAAeA;AAJjB,KAKMG,KALN,gBAOE,oBAAC,UAAD;AAAM,IAAA,EAAE,EAAEC,WAAV;AAAiB,IAAA,KAAK,EAAC,GAAvB;AAA2B,IAAA,SAAS,EAAE,eAAG,aAAH,EAAkBF,aAAlB;AAAtC,IAPF,CADA;AAAA,CAH4B,CAAvB;;;AAeP,IAAIG,cAAJ,EAAa;AACXT,EAAAA,cAAc,CAACU,WAAf,GAA6B,gBAA7B;AACD;;AAMM,IAAMC,QAAiC,GAAG,SAApCA,QAAoC;AAAA,MAAGN,SAAH,SAAGA,SAAH;AAAA,MAAiBE,KAAjB;;AAAA,sBAC/C;AAAM,IAAA,SAAS,EAAE,eAAGF,SAAH;AAAjB,KAAoCE,KAApC,EAD+C;AAAA,CAA1C;;;;AAIP,IAAIE,cAAJ,EAAa;AACXE,EAAAA,QAAQ,CAACD,WAAT,GAAuB,UAAvB;AACD;;AAeM,IAAME,GAAG,gBAAGX,KAAK,CAACC,UAAN,CAA2C,UAACK,KAAD,EAAQJ,GAAR,EAAgB;AAC5E,uBAMII,KANJ,CACEM,OADF;AAAA,MACEA,OADF,+BACY,SADZ;AAAA,oBAMIN,KANJ,CAEEO,IAFF;AAAA,MAEEA,IAFF,4BAES,IAFT;AAAA,qBAMIP,KANJ,CAGEQ,KAHF;AAAA,MAGEA,KAHF,6BAGU,EAHV;AAAA,MAIEV,SAJF,GAMIE,KANJ,CAIEF,SAJF;AAAA,MAKKW,IALL,iCAMIT,KANJ;;AAOA,MAAMU,OAAO,GAAG,yBAAY;AAAEJ,IAAAA,OAAO,EAAPA,OAAF;AAAWC,IAAAA,IAAI,EAAJA;AAAX,GAAZ,CAAhB;AAEA,sBACE;AACE,IAAA,GAAG,EAAEX,GADP;AAEE,kBAAYY,KAAK,GAAGA,KAAH,GAAWG,SAF9B;AAGE,IAAA,SAAS,EAAE,eAAGD,OAAH,EAAYZ,SAAZ;AAHb,KAIMW,IAJN,EADF;AAQD,CAlBkB,CAAZ;;;AAoBP,IAAIP,cAAJ,EAAa;AACXG,EAAAA,GAAG,CAACF,WAAJ,GAAkB,KAAlB;AACD","sourcesContent":["import { DefaultProps } from \"@vechaiui/theme\";\nimport { Icon, XIcon } from \"@vechaiui/icon\";\nimport { cx, __DEV__ } from \"@vechaiui/utils\";\nimport * as React from \"react\";\n\nimport { useTagClass } from \"./styles\";\n\nexport interface TagCloseButtonProps\n  extends DefaultProps,\n    React.HTMLAttributes<HTMLButtonElement> {\n  disabled?: boolean;\n  iconClassName?: string;\n}\n\n// FIXME\nexport const TagCloseButton = React.forwardRef<\n  HTMLButtonElement,\n  TagCloseButtonProps\n>(({ disabled, className, iconClassName, ...props }, ref) => (\n  <button\n    ref={ref}\n    className={cx(\"tag-close-button\", className)}\n    disabled={disabled}\n    aria-disabled={disabled}\n    {...props}\n  >\n    <Icon as={XIcon} label=\"x\" className={cx(\"w-3.5 h-3.5\", iconClassName)} />\n  </button>\n));\n\nif (__DEV__) {\n  TagCloseButton.displayName = \"TagCloseButton\";\n}\n\nexport interface TagLabelProps\n  extends DefaultProps,\n    React.HTMLAttributes<HTMLSpanElement> {}\n\nexport const TagLabel: React.FC<TagLabelProps> = ({ className, ...props }) => (\n  <span className={cx(className)} {...props} />\n);\n\nif (__DEV__) {\n  TagLabel.displayName = \"TagLabel\";\n}\n\ninterface ITagProps extends DefaultProps {\n  /* The color of tag */\n  color?: string;\n  /* Controls tag appearance */\n  variant?: \"outline\" | \"solid\" | \"light\";\n  /* The size of tag */\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n}\n\nexport interface TagProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    ITagProps {}\n\nexport const Tag = React.forwardRef<HTMLDivElement, TagProps>((props, ref) => {\n  const {\n    variant = \"outline\",\n    size = \"md\",\n    color = \"\",\n    className,\n    ...rest\n  } = props;\n  const classes = useTagClass({ variant, size });\n\n  return (\n    <div\n      ref={ref}\n      data-color={color ? color : undefined}\n      className={cx(classes, className)}\n      {...rest}\n    />\n  );\n});\n\nif (__DEV__) {\n  Tag.displayName = \"Tag\";\n}\n"],"file":"tag.js"}