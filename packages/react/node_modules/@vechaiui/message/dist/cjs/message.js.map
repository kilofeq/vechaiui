{"version":3,"sources":["../../src/message.tsx"],"names":["statuses","info","icon","InfoIcon","cx","label","success","CheckCircleIcon","error","XCricleIcon","warning","ExclamationIcon","Message","React","forwardRef","ref","message","className","customIcon","status","__DEV__","displayName","useMessage"],"mappings":";;;;;AAAA;;AAOA;;AACA;;AACA;;;;;;AAEA,IAAMA,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEC,cADF;AAEJC,IAAAA,EAAE,EAAE,mBAFA;AAGJC,IAAAA,KAAK,EAAE;AAHH,GADS;AAMfC,EAAAA,OAAO,EAAE;AACPJ,IAAAA,IAAI,EAAEK,qBADC;AAEPH,IAAAA,EAAE,EAAE,sBAFG;AAGPC,IAAAA,KAAK,EAAE;AAHA,GANM;AAWfG,EAAAA,KAAK,EAAE;AACLN,IAAAA,IAAI,EAAEO,iBADD;AAELL,IAAAA,EAAE,EAAE,oBAFC;AAGLC,IAAAA,KAAK,EAAE;AAHF,GAXQ;AAgBfK,EAAAA,OAAO,EAAE;AACPR,IAAAA,IAAI,EAAES,qBADC;AAEPP,IAAAA,EAAE,EAAE,sBAFG;AAGPC,IAAAA,KAAK,EAAE;AAHA;AAhBM,CAAjB;AAiCA,IAAMO,OAAO,gBAAGC,KAAK,CAACC,UAAN,CACd,gBAAwDC,GAAxD,EAAgE;AAAA,MAA7DC,OAA6D,QAA7DA,OAA6D;AAAA,MAApDC,SAAoD,QAApDA,SAAoD;AAAA,MAAnCC,UAAmC,QAAzChB,IAAyC;AAAA,yBAAvBiB,MAAuB;AAAA,MAAvBA,MAAuB,4BAAd,EAAc;;AAC9D,cAA4BnB,QAAQ,CAACmB,MAAD,CAAR,IAAoB,EAAhD;AAAA,MAAQjB,IAAR,SAAQA,IAAR;AAAA,MAAcE,EAAd,SAAcA,EAAd;AAAA,MAAkBC,KAAlB,SAAkBA,KAAlB;;AACA,sBACE;AAAK,IAAA,SAAS,EAAE,eAAK,SAAL,EAAgBY,SAAhB,CAAhB;AAA4C,IAAA,GAAG,EAAEF;AAAjD,KACG,CAAEb,IAAI,IAAIE,EAAT,IAAgBc,UAAjB,MACEA,UAAU,GACTA,UADS,gBAGT,oBAAC,UAAD;AACE,IAAA,EAAE,EAAEhB,IADN;AAEE,IAAA,KAAK,EAAEG,KAFT;AAGE,IAAA,SAAS,EAAE,eAAK,sBAAL,EAA6BD,EAA7B;AAHb,IAJH,CADH,eAWE,kCAAOY,OAAP,CAXF,CADF;AAeD,CAlBa,CAAhB;;AAqBA,IAAII,cAAJ,EAAa;AACXR,EAAAA,OAAO,CAACS,WAAR,GAAsB,SAAtB;AACD;;AAEM,IAAMC,UAAU,GAAG,wBAAYV,OAAZ,CAAnB","sourcesContent":["import {\n  Icon,\n  InfoIcon,\n  XCricleIcon,\n  CheckCircleIcon,\n  ExclamationIcon,\n} from \"@vechaiui/icon\";\nimport { createToast, useToastOptions } from \"@vechaiui/toast\";\nimport { cx as clsx, __DEV__ } from \"@vechaiui/utils\";\nimport * as React from \"react\";\n\nconst statuses = {\n  info: {\n    icon: InfoIcon,\n    cx: \"message-icon-info\",\n    label: \"info\"\n  },\n  success: {\n    icon: CheckCircleIcon,\n    cx: \"message-icon-success\",\n    label: \"check-circle\"\n  },\n  error: {\n    icon: XCricleIcon,\n    cx: \"message-icon-error\",\n    label: \"x-circle\"\n  },\n  warning: {\n    icon: ExclamationIcon,\n    cx: \"message-icon-warning\",\n    label: \"exclamationIcon\",\n  },\n};\n\ntype OmittedTypes =\n  | \"title\"\n  | \"closeable\"\n  | \"closeIcon\"\n  | \"onUndo\"\n  | \"undoText\"\n  | \"description\";\n\nexport interface MessageProps extends Omit<useToastOptions, OmittedTypes> { }\n\nconst Message = React.forwardRef<HTMLDivElement, MessageProps>(\n  ({ message, className, icon: customIcon, status = \"\" }, ref) => {\n    const { icon, cx, label } = statuses[status] || {};\n    return (\n      <div className={clsx(\"message\", className)} ref={ref}>\n        {((icon && cx) || customIcon) &&\n          (customIcon ? (\n            customIcon\n          ) : (\n            <Icon\n              as={icon}\n              label={label}\n              className={clsx(\"message-icon w-5 h-5\", cx)}\n            />\n          ))}\n        <span>{message}</span>\n      </div>\n    );\n  }\n);\n\nif (__DEV__) {\n  Message.displayName = \"Message\";\n}\n\nexport const useMessage = createToast(Message);\n"],"file":"message.js"}