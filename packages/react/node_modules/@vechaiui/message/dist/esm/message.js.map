{"version":3,"sources":["../../src/message.tsx"],"names":["Icon","InfoIcon","XCricleIcon","CheckCircleIcon","ExclamationIcon","createToast","cx","clsx","__DEV__","React","statuses","info","icon","label","success","error","warning","Message","forwardRef","ref","message","className","customIcon","status","displayName","useMessage"],"mappings":"AAAA,SACEA,IADF,EAEEC,QAFF,EAGEC,WAHF,EAIEC,eAJF,EAKEC,eALF,QAMO,gBANP;AAOA,SAASC,WAAT,QAA6C,iBAA7C;AACA,SAASC,EAAE,IAAIC,IAAf,EAAqBC,OAArB,QAAoC,iBAApC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEX,QADF;AAEJK,IAAAA,EAAE,EAAE,mBAFA;AAGJO,IAAAA,KAAK,EAAE;AAHH,GADS;AAMfC,EAAAA,OAAO,EAAE;AACPF,IAAAA,IAAI,EAAET,eADC;AAEPG,IAAAA,EAAE,EAAE,sBAFG;AAGPO,IAAAA,KAAK,EAAE;AAHA,GANM;AAWfE,EAAAA,KAAK,EAAE;AACLH,IAAAA,IAAI,EAAEV,WADD;AAELI,IAAAA,EAAE,EAAE,oBAFC;AAGLO,IAAAA,KAAK,EAAE;AAHF,GAXQ;AAgBfG,EAAAA,OAAO,EAAE;AACPJ,IAAAA,IAAI,EAAER,eADC;AAEPE,IAAAA,EAAE,EAAE,sBAFG;AAGPO,IAAAA,KAAK,EAAE;AAHA;AAhBM,CAAjB;AAiCA,IAAMI,OAAO,gBAAGR,KAAK,CAACS,UAAN,CACd,OAAwDC,GAAxD,KAAgE;AAAA,MAA/D;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBT,IAAAA,IAAI,EAAEU,UAA5B;AAAwCC,IAAAA,MAAM,GAAG;AAAjD,GAA+D;AAC9D,MAAM;AAAEX,IAAAA,IAAF;AAAQN,IAAAA,EAAR;AAAYO,IAAAA;AAAZ,MAAsBH,QAAQ,CAACa,MAAD,CAAR,IAAoB,EAAhD;AACA,sBACE;AAAK,IAAA,SAAS,EAAEhB,IAAI,CAAC,SAAD,EAAYc,SAAZ,CAApB;AAA4C,IAAA,GAAG,EAAEF;AAAjD,KACG,CAAEP,IAAI,IAAIN,EAAT,IAAgBgB,UAAjB,MACEA,UAAU,GACTA,UADS,gBAGT,oBAAC,IAAD;AACE,IAAA,EAAE,EAAEV,IADN;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,SAAS,EAAEN,IAAI,CAAC,sBAAD,EAAyBD,EAAzB;AAHjB,IAJH,CADH,eAWE,kCAAOc,OAAP,CAXF,CADF;AAeD,CAlBa,CAAhB;;AAqBA,IAAIZ,OAAJ,EAAa;AACXS,EAAAA,OAAO,CAACO,WAAR,GAAsB,SAAtB;AACD;;AAED,OAAO,IAAMC,UAAU,GAAGpB,WAAW,CAACY,OAAD,CAA9B","sourcesContent":["import {\n  Icon,\n  InfoIcon,\n  XCricleIcon,\n  CheckCircleIcon,\n  ExclamationIcon,\n} from \"@vechaiui/icon\";\nimport { createToast, useToastOptions } from \"@vechaiui/toast\";\nimport { cx as clsx, __DEV__ } from \"@vechaiui/utils\";\nimport * as React from \"react\";\n\nconst statuses = {\n  info: {\n    icon: InfoIcon,\n    cx: \"message-icon-info\",\n    label: \"info\"\n  },\n  success: {\n    icon: CheckCircleIcon,\n    cx: \"message-icon-success\",\n    label: \"check-circle\"\n  },\n  error: {\n    icon: XCricleIcon,\n    cx: \"message-icon-error\",\n    label: \"x-circle\"\n  },\n  warning: {\n    icon: ExclamationIcon,\n    cx: \"message-icon-warning\",\n    label: \"exclamationIcon\",\n  },\n};\n\ntype OmittedTypes =\n  | \"title\"\n  | \"closeable\"\n  | \"closeIcon\"\n  | \"onUndo\"\n  | \"undoText\"\n  | \"description\";\n\nexport interface MessageProps extends Omit<useToastOptions, OmittedTypes> { }\n\nconst Message = React.forwardRef<HTMLDivElement, MessageProps>(\n  ({ message, className, icon: customIcon, status = \"\" }, ref) => {\n    const { icon, cx, label } = statuses[status] || {};\n    return (\n      <div className={clsx(\"message\", className)} ref={ref}>\n        {((icon && cx) || customIcon) &&\n          (customIcon ? (\n            customIcon\n          ) : (\n            <Icon\n              as={icon}\n              label={label}\n              className={clsx(\"message-icon w-5 h-5\", cx)}\n            />\n          ))}\n        <span>{message}</span>\n      </div>\n    );\n  }\n);\n\nif (__DEV__) {\n  Message.displayName = \"Message\";\n}\n\nexport const useMessage = createToast(Message);\n"],"file":"message.js"}