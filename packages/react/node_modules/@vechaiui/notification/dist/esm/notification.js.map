{"version":3,"sources":["../../src/notification.tsx"],"names":["Button","Icon","InfoIcon","XIcon","XCricleIcon","CheckCircleIcon","ExclamationIcon","createToast","cx","clsx","__DEV__","React","statuses","info","icon","label","success","error","warning","Notification","forwardRef","props","ref","title","description","className","status","onClose","customIcon","closeIcon","customCloseIcon","closeable","onUndo","undoText","displayName","useNotification"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SACEC,IADF,EAEEC,QAFF,EAGEC,KAHF,EAIEC,WAJF,EAKEC,eALF,EAMEC,eANF,QAOO,gBAPP;AAQA,SAASC,WAAT,QAA6C,iBAA7C;AACA,SAASC,EAAE,IAAIC,IAAf,EAAqBC,OAArB,QAAoC,iBAApC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEZ,QADF;AAEJM,IAAAA,EAAE,EAAE,wBAFA;AAGJO,IAAAA,KAAK,EAAE;AAHH,GADS;AAMfC,EAAAA,OAAO,EAAE;AACPF,IAAAA,IAAI,EAAET,eADC;AAEPG,IAAAA,EAAE,EAAE,2BAFG;AAGPO,IAAAA,KAAK,EAAE;AAHA,GANM;AAWfE,EAAAA,KAAK,EAAE;AACLH,IAAAA,IAAI,EAAEV,WADD;AAELI,IAAAA,EAAE,EAAE,yBAFC;AAGLO,IAAAA,KAAK,EAAE;AAHF,GAXQ;AAgBfG,EAAAA,OAAO,EAAE;AACPJ,IAAAA,IAAI,EAAER,eADC;AAEPE,IAAAA,EAAE,EAAE,2BAFG;AAGPO,IAAAA,KAAK,EAAE;AAHA;AAhBM,CAAjB;AA4BA,IAAMI,YAAY,gBAAGR,KAAK,CAACS,UAAN,CACnB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACd,MAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,MAAM,GAAG,EAJL;AAKJC,IAAAA,OALI;AAMJb,IAAAA,IAAI,EAAEc,UANF;AAOJC,IAAAA,SAAS,EAAEC,eAPP;AAQJC,IAAAA,SAAS,GAAG,IARR;AASJC,IAAAA,MATI;AAUJC,IAAAA,QAAQ,GAAG;AAVP,MAWFZ,KAXJ;AAYA,MAAM;AAAEP,IAAAA,IAAF;AAAQN,IAAAA,EAAR;AAAYO,IAAAA;AAAZ,MAAsBH,QAAQ,CAACc,MAAD,CAAR,IAAoB,EAAhD;AAEA,sBACE;AAAK,IAAA,GAAG,EAAEJ,GAAV;AAAe,IAAA,SAAS,EAAEb,IAAI,CAAC,cAAD,EAAiBgB,SAAjB;AAA9B,KACG,CAAEX,IAAI,IAAIN,EAAT,IAAgBoB,UAAjB,kBACC;AAAM,IAAA,SAAS,EAAEnB,IAAI,CAAC,mBAAD,EAAsBD,EAAtB;AAArB,KACGoB,UAAU,GACTA,UADS,gBAGT,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEb,KAAb;AAAoB,IAAA,EAAE,EAAEa,UAAU,IAAId,IAAtC;AAA4C,IAAA,SAAS,EAAC;AAAtD,IAJJ,CAFJ,eAUE;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE;AAAM,IAAA,SAAS,EAAC;AAAhB,KAA8CS,KAA9C,CADF,eAEE;AAAM,IAAA,SAAS,EAAC;AAAhB,KACGC,WADH,CAFF,CAVF,eAgBE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGQ,MAAM,iBACL,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,SAAS,EAAC,0BAHZ;AAIE,IAAA,OAAO,EAAE,MAAM;AACbA,MAAAA,MAAM;AACP;AANH,KAQGC,QARH,CAFJ,EAcGF,SAAS,iBACR;AACE,IAAA,OAAO,EAAEJ,OADX;AAEE,IAAA,SAAS,EAAC;AAFZ,KAIGG,eAAe,GACdA,eADc,gBAGd,oBAAC,IAAD;AACE,IAAA,EAAE,EAAE3B,KADN;AAEE,IAAA,KAAK,EAAC,GAFR;AAGE,IAAA,SAAS,EAAC;AAHZ,IAPJ,CAfJ,CAhBF,CADF;AAkDD,CAlEkB,CAArB;;AAqEA,IAAIO,OAAJ,EAAa;AACXS,EAAAA,YAAY,CAACe,WAAb,GAA2B,cAA3B;AACD;;AAED,OAAO,IAAMC,eAAe,GAAG5B,WAAW,CAACY,YAAD,CAAnC","sourcesContent":["import { Button } from \"@vechaiui/button\";\nimport {\n  Icon,\n  InfoIcon,\n  XIcon,\n  XCricleIcon,\n  CheckCircleIcon,\n  ExclamationIcon,\n} from \"@vechaiui/icon\";\nimport { createToast, useToastOptions } from \"@vechaiui/toast\";\nimport { cx as clsx, __DEV__ } from \"@vechaiui/utils\";\nimport * as React from \"react\";\n\nconst statuses = {\n  info: {\n    icon: InfoIcon,\n    cx: \"notification-icon-info\",\n    label: \"info\"\n  },\n  success: {\n    icon: CheckCircleIcon,\n    cx: \"notification-icon-success\",\n    label: \"check-circle\",\n  },\n  error: {\n    icon: XCricleIcon,\n    cx: \"notification-icon-error\",\n    label: \"x-circle\"\n  },\n  warning: {\n    icon: ExclamationIcon,\n    cx: \"notification-icon-warning\",\n    label: \"exclamationIcon\",\n  },\n};\n\ntype OmittedTypes = \"message\";\n\nexport interface NotificationProps\n  extends Omit<useToastOptions, OmittedTypes> { }\n\nconst Notification = React.forwardRef<HTMLDivElement, NotificationProps>(\n  (props, ref) => {\n    const {\n      title,\n      description,\n      className,\n      status = \"\",\n      onClose,\n      icon: customIcon,\n      closeIcon: customCloseIcon,\n      closeable = true,\n      onUndo,\n      undoText = \"Undo\",\n    } = props;\n    const { icon, cx, label } = statuses[status] || {};\n\n    return (\n      <div ref={ref} className={clsx(\"notification\", className)}>\n        {((icon && cx) || customIcon) && (\n          <span className={clsx(\"notification-icon\", cx)}>\n            {customIcon ? (\n              customIcon\n            ) : (\n              <Icon label={label} as={customIcon || icon} className=\"w-5 h-5\" />\n            )}\n          </span>\n        )}\n        <div className=\"notification-content\">\n          <span className=\"notification-content-title\">{title}</span>\n          <span className=\"notification-content-description\">\n            {description}\n          </span>\n        </div>\n        <div className=\"notification-action\">\n          {onUndo && (\n            <Button\n              variant=\"link\"\n              color=\"primary\"\n              className=\"notification-action-undo\"\n              onClick={() => {\n                onUndo();\n              }}\n            >\n              {undoText}\n            </Button>\n          )}\n\n          {closeable && (\n            <button\n              onClick={onClose}\n              className=\"notification-action-close-button\"\n            >\n              {customCloseIcon ? (\n                customCloseIcon\n              ) : (\n                <Icon\n                  as={XIcon}\n                  label=\"x\"\n                  className=\"text-current align-text-bottom h-3.5 w-3.5\"\n                />\n              )}\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nif (__DEV__) {\n  Notification.displayName = \"Notification\";\n}\n\nexport const useNotification = createToast(Notification);\n"],"file":"notification.js"}