{"version":3,"file":"radio-group.js","names":["useId","cx","getValidChildren","__DEV__","React","cloneElement","useImperativeHandle","useRef","useState","RadioGroup","forwardRef","props","ref","onChange","name","color","size","defaultValue","inline","value","valueProp","children","rest","current","isControlled","setValue","_value","rootRef","_onChange","event","target","fallbackName","_name","validChildren","clones","map","child","index","checked","focus","input","querySelector","displayName"],"sources":["../../src/radio-group.tsx"],"sourcesContent":["import { useId } from \"@reach/auto-id\";\nimport { DefaultProps } from \"@vechaiui/theme\";\nimport { cx, getValidChildren, __DEV__ } from \"@vechaiui/utils\";\nimport * as React from \"react\";\nimport { cloneElement, useImperativeHandle, useRef, useState } from \"react\";\n\nimport { RadioProps } from \"./radio\";\n\ninterface IRadioGroupProps extends DefaultProps {\n  /**\n   * The id of the radio group.\n   */\n  id?: string;\n  /**\n   * The name of the radio group. This prop is passed to each checbox\n   */\n  name?: string;\n  /**\n   * The content of the radio group. Must be the `Radio` component\n   */\n  children?: React.ReactNode;\n  /**\n   * The initial value of the radio group\n   */\n  defaultValue?: RadioProps[\"value\"];\n  /**\n   * The value of the radio group\n   */\n  value?: RadioProps[\"value\"];\n  /* Size of all wrapped radio */\n\n  size?: RadioProps[\"size\"];\n  /* Color of all wrapped radio */\n\n  color?: RadioProps[\"color\"];\n  /**\n   * The callback fired when any children Radio is checked or unchecked\n   */\n  onChange?: (\n    event: React.ChangeEvent<HTMLInputElement>,\n    value: RadioProps[\"value\"]\n  ) => void;\n  /**\n   * If `true`, the radio will aligned horizontally.\n   */\n  inline?: boolean;\n}\n\ntype RadioGroupElement = {\n  focus: () => void;\n} | undefined;\nexport type RadioGroupProps = IRadioGroupProps;\n\nexport const RadioGroup = React.forwardRef<RadioGroupElement, RadioGroupProps>(\n  (props, ref) => {\n    const {\n      onChange,\n      name,\n      color,\n      size,\n      defaultValue,\n      inline,\n      value: valueProp,\n      children,\n      ...rest\n    } = props;\n    const { current: isControlled } = useRef(valueProp != null);\n    const [value, setValue] = useState(defaultValue || null);\n    const _value = isControlled ? valueProp : value;\n\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    const _onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (!isControlled) {\n        setValue(event.target.value);\n      }\n\n      if (onChange) {\n        onChange(event, event.target.value);\n      }\n    };\n\n    // If no name is passed, we'll generate a random, unique name\n    const fallbackName = `radio-${useId()}`;\n    const _name = name || fallbackName;\n\n    const validChildren = getValidChildren(children);\n\n    const clones = validChildren.map((child, index) => {\n      return (\n        <div key={index} className={cx(inline ? \"inline-block\" : \"block\")}>\n          {cloneElement(child, {\n            size: child.props.size || size,\n            color: child.props.color || color,\n            name: _name,\n            onChange: _onChange,\n            checked: child.props.value === _value,\n          })}\n        </div>\n      );\n    });\n\n    // Calling focus() on the radiogroup should focus on the selected option or first enabled option\n    useImperativeHandle(\n      ref,\n      () => ({\n        focus: () => {\n          let input: HTMLInputElement | null = rootRef.current?.querySelector(\n            \"input:not(:disabled):checked\"\n          ) || null;\n\n          if (!input) {\n            input = rootRef.current?.querySelector(\"input:not(:disabled)\") || null;\n          }\n\n          if (input) {\n            input.focus();\n          }\n        },\n      }),\n      []\n    );\n\n    return (\n      <div ref={rootRef} role=\"radiogroup\" {...rest}>\n        {clones}\n      </div>\n    );\n  }\n);\n\nif (__DEV__) {\n  RadioGroup.displayName = \"RadioGroup\";\n}"],"mappings":";;;AAAA,SAASA,KAAK,QAAQ,gBAAgB;AAEtC,SAASC,EAAE,EAAEC,gBAAgB,EAAEC,OAAO,QAAQ,iBAAiB;AAC/D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,YAAY,EAAEC,mBAAmB,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAiD3E,OAAO,IAAMC,UAAU,gBAAGL,KAAK,CAACM,UAAU,CACxC,CAACC,KAAK,EAAEC,GAAG,KAAK;EACd,IAAM;MACJC,QAAQ;MACRC,IAAI;MACJC,KAAK;MACLC,IAAI;MACJC,YAAY;MACZC,MAAM;MACNC,KAAK,EAAEC,SAAS;MAChBC;IAEF,CAAC,GAAGV,KAAK;IADJW,IAAI,iCACLX,KAAK;EACT,IAAM;IAAEY,OAAO,EAAEC;EAAa,CAAC,GAAGjB,MAAM,CAACa,SAAS,IAAI,IAAI,CAAC;EAC3D,IAAM,CAACD,KAAK,EAAEM,QAAQ,CAAC,GAAGjB,QAAQ,CAACS,YAAY,IAAI,IAAI,CAAC;EACxD,IAAMS,MAAM,GAAGF,YAAY,GAAGJ,SAAS,GAAGD,KAAK;EAE/C,IAAMQ,OAAO,GAAGpB,MAAM,CAAiB,IAAI,CAAC;EAE5C,IAAMqB,SAAS,GAAIC,KAA0C,IAAK;IAChE,IAAI,CAACL,YAAY,EAAE;MACjBC,QAAQ,CAACI,KAAK,CAACC,MAAM,CAACX,KAAK,CAAC;IAC9B;IAEA,IAAIN,QAAQ,EAAE;MACZA,QAAQ,CAACgB,KAAK,EAAEA,KAAK,CAACC,MAAM,CAACX,KAAK,CAAC;IACrC;EACF,CAAC;;EAED;EACA,IAAMY,YAAY,cAAY/B,KAAK,EAAI;EACvC,IAAMgC,KAAK,GAAGlB,IAAI,IAAIiB,YAAY;EAElC,IAAME,aAAa,GAAG/B,gBAAgB,CAACmB,QAAQ,CAAC;EAEhD,IAAMa,MAAM,GAAGD,aAAa,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;IACjD,oBACE;MAAK,GAAG,EAAEA,KAAM;MAAC,SAAS,EAAEpC,EAAE,CAACiB,MAAM,GAAG,cAAc,GAAG,OAAO;IAAE,gBAC/Db,YAAY,CAAC+B,KAAK,EAAE;MACnBpB,IAAI,EAAEoB,KAAK,CAACzB,KAAK,CAACK,IAAI,IAAIA,IAAI;MAC9BD,KAAK,EAAEqB,KAAK,CAACzB,KAAK,CAACI,KAAK,IAAIA,KAAK;MACjCD,IAAI,EAAEkB,KAAK;MACXnB,QAAQ,EAAEe,SAAS;MACnBU,OAAO,EAAEF,KAAK,CAACzB,KAAK,CAACQ,KAAK,KAAKO;IACjC,CAAC,CAAC,CACE;EAEV,CAAC,CAAC;;EAEF;EACApB,mBAAmB,CACjBM,GAAG,EACH,OAAO;IACL2B,KAAK,EAAE,MAAM;MAAA;MACX,IAAIC,KAA8B,GAAG,qBAAAb,OAAO,CAACJ,OAAO,qBAAf,iBAAiBkB,aAAa,CACjE,8BAA8B,CAC/B,KAAI,IAAI;MAET,IAAI,CAACD,KAAK,EAAE;QAAA;QACVA,KAAK,GAAG,sBAAAb,OAAO,CAACJ,OAAO,qBAAf,kBAAiBkB,aAAa,CAAC,sBAAsB,CAAC,KAAI,IAAI;MACxE;MAEA,IAAID,KAAK,EAAE;QACTA,KAAK,CAACD,KAAK,EAAE;MACf;IACF;EACF,CAAC,CAAC,EACF,EAAE,CACH;EAED,oBACE;IAAK,GAAG,EAAEZ,OAAQ;IAAC,IAAI,EAAC;EAAY,GAAKL,IAAI,GAC1CY,MAAM,CACH;AAEV,CAAC,CACF;AAED,IAAI/B,OAAO,EAAE;EACXM,UAAU,CAACiC,WAAW,GAAG,YAAY;AACvC"}