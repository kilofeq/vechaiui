{"version":3,"sources":["../../src/refs.ts"],"names":["setRef","ref","value","current","useForkRef","refA","refB","React","useMemo","refValue"],"mappings":";;;;;;AAAA;;;;;;AAOO,SAASA,MAAT,CAAyBC,GAAzB,EAAuDC,KAAvD,EAAiE;AACtE,MAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,IAAAA,GAAG,CAACC,KAAD,CAAH;AACD,GAFD,MAEO,IAAID,GAAJ,EAAS;AACd;AACAA,IAAAA,GAAG,CAACE,OAAJ,GAAcD,KAAd;AACD;AACF;;AAEM,SAASE,UAAT,CACLC,IADK,EAELC,IAFK,EAGL;AACA,SAAOC,KAAK,CAACC,OAAN,CAAc,YAAM;AACzB,QAAIH,IAAI,IAAI,IAAR,IAAgBC,IAAI,IAAI,IAA5B,EAAkC;AAChC,aAAO,IAAP;AACD;;AACD,WAAO,UAACG,QAAD,EAAiB;AACtBT,MAAAA,MAAM,CAACK,IAAD,EAAOI,QAAP,CAAN;AACAT,MAAAA,MAAM,CAACM,IAAD,EAAOG,QAAP,CAAN;AACD,KAHD;AAID,GARM,EAQJ,CAACJ,IAAD,EAAOC,IAAP,CARI,CAAP;AASD","sourcesContent":["import * as React from \"react\";\n\ntype ReactRef<T> =\n  | React.Ref<T>\n  | React.RefObject<T>\n  | React.MutableRefObject<T>;\n\nexport function setRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else if (ref) {\n    // @ts-ignore\n    ref.current = value;\n  }\n}\n\nexport function useForkRef<T = any>(\n  refA: ReactRef<T> | undefined,\n  refB: ReactRef<T> | undefined\n) {\n  return React.useMemo(() => {\n    if (refA == null && refB == null) {\n      return null;\n    }\n    return (refValue: T) => {\n      setRef(refA, refValue);\n      setRef(refB, refValue);\n    };\n  }, [refA, refB]);\n}\n"],"file":"refs.js"}