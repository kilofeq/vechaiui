{"version":3,"sources":["../../src/button-group.tsx"],"names":["ButtonGroup","React","forwardRef","props","ref","size","color","variant","attached","disabled","children","className","rest","validChildren","clones","map","child","cloneElement","__DEV__","displayName"],"mappings":";;;;;AACA;;AACA;;;;;;;;;;;;AA0BO,IAAMA,WAAW,gBAAGC,KAAK,CAACC,UAAN,CACzB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACd,MACEC,IADF,GASIF,KATJ,CACEE,IADF;AAAA,MAEEC,KAFF,GASIH,KATJ,CAEEG,KAFF;AAAA,MAGEC,OAHF,GASIJ,KATJ,CAGEI,OAHF;AAAA,MAIEC,QAJF,GASIL,KATJ,CAIEK,QAJF;AAAA,MAKEC,QALF,GASIN,KATJ,CAKEM,QALF;AAAA,MAMEC,QANF,GASIP,KATJ,CAMEO,QANF;AAAA,MAOEC,SAPF,GASIR,KATJ,CAOEQ,SAPF;AAAA,MAQKC,IARL,iCASIT,KATJ;;AAWA,MAAMU,aAAa,GAAG,6BAAiBH,QAAjB,CAAtB;AACA,MAAMI,MAAM,GAAGD,aAAa,CAACE,GAAd,CAAkB,UAACC,KAAD,EAAW;AAC1C,wBAAOf,KAAK,CAACgB,YAAN,CAAmBD,KAAnB,EAA0B;AAC/BX,MAAAA,IAAI,EAAEA,IAAI,IAAIW,KAAK,CAACb,KAAN,CAAYE,IADK;AAE/BC,MAAAA,KAAK,EAAEU,KAAK,CAACb,KAAN,CAAYG,KAAZ,IAAqBA,KAFG;AAG/BC,MAAAA,OAAO,EAAES,KAAK,CAACb,KAAN,CAAYI,OAAZ,IAAuBA,OAHD;AAI/BE,MAAAA,QAAQ,EAAEO,KAAK,CAACb,KAAN,CAAYM,QAAZ,IAAwBA;AAJH,KAA1B,CAAP;AAMD,GAPc,CAAf;AASA,sBACE;AACE,IAAA,GAAG,EAAEL,GADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,SAAS,EAAE,eAAG,WAAH,EAAgBI,QAAQ,IAAI,oBAA5B,EAAkDG,SAAlD;AAHb,KAIMC,IAJN,GAMGE,MANH,CADF;AAUD,CAjCwB,CAApB;;;AAoCP,IAAII,cAAJ,EAAa;AACXlB,EAAAA,WAAW,CAACmB,WAAZ,GAA0B,aAA1B;AACD","sourcesContent":["import { DefaultProps } from \"@vechaiui/theme\";\nimport { cx, getValidChildren, __DEV__ } from \"@vechaiui/utils\";\nimport * as React from \"react\";\n\nimport { ButtonProps } from \"./button\";\n\ninterface IButtonGroupProps extends DefaultProps {\n  /**\n   * If `true`, the borderRadius of button that are direct children will be altered\n   * to look flushed together\n   */\n  attached?: boolean;\n  /* Set all wrapped button will be disabled */\n  disabled?: boolean;\n  /* Size of all wrapped button */\n  size?: ButtonProps[\"size\"];\n  /** Controls all wrapped button appearance */\n  variant?: ButtonProps[\"variant\"];\n  /* Set all wrapped button color */\n  color?: ButtonProps[\"color\"];\n  /* React node */\n  children?: React.ReactNode;\n}\n\nexport interface ButtonGroupProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    IButtonGroupProps {}\n\nexport const ButtonGroup = React.forwardRef<HTMLDivElement, ButtonGroupProps>(\n  (props, ref) => {\n    const {\n      size,\n      color,\n      variant,\n      attached,\n      disabled,\n      children,\n      className,\n      ...rest\n    } = props;\n\n    const validChildren = getValidChildren(children);\n    const clones = validChildren.map((child) => {\n      return React.cloneElement(child, {\n        size: size || child.props.size,\n        color: child.props.color || color,\n        variant: child.props.variant || variant,\n        disabled: child.props.disabled || disabled,\n      });\n    });\n\n    return (\n      <div\n        ref={ref}\n        role=\"group\"\n        className={cx(\"btn-group\", attached && \"btn-group-attached\", className)}\n        {...rest}\n      >\n        {clones}\n      </div>\n    );\n  }\n);\n\nif (__DEV__) {\n  ButtonGroup.displayName = \"ButtonGroup\";\n}\n"],"file":"button-group.js"}