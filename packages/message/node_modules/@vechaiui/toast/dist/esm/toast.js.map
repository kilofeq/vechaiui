{"version":3,"sources":["../../src/toast.tsx"],"names":["toaster","React","useCallback","createToast","Comp","notify","position","duration","render","rest","options","onClose","id"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAkC,yBAAlC;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,OAA5B;AA6DA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA8C;AACnD,SAAO,YAAW;AAChB,QAAMC,MAAM,GAAGH,WAAW,CACxB,QAKuB;AAAA,UALtB;AACCI,QAAAA,QAAQ,GAAG,QADZ;AAECC,QAAAA,QAAQ,GAAG,IAFZ;AAGCC,QAAAA;AAHD,OAKsB;AAAA,UADlBC,IACkB;;AACrB,UAAMC,OAAO,GAAG;AACdJ,QAAAA,QADc;AAEdC,QAAAA;AAFc,OAAhB;;AAKA,UAAIC,MAAJ,EAAY;AACV,eAAOR,OAAO,CAACK,MAAR,CACL;AAAA,cAAC;AAAEM,YAAAA,OAAF;AAAWC,YAAAA;AAAX,WAAD;AAAA,iBAAqBJ,MAAM;AAAGG,YAAAA,OAAH;AAAYC,YAAAA;AAAZ,aAAmBH,IAAnB,EAA3B;AAAA,SADK,EAELC,OAFK,CAAP;AAID;;AAEDV,MAAAA,OAAO,CAACK,MAAR,CACE;AAAA,YAAC;AAAEM,UAAAA,OAAF;AAAWC,UAAAA;AAAX,SAAD;AAAA,4BACE,oBAAC,IAAD;AAEID,UAAAA,OAFJ;AAGIC,UAAAA;AAHJ,WAIOH,IAJP,EADF;AAAA,OADF,EAUEC,OAVF;AAYD,KA/BuB,EAgCxB,EAhCwB,CAA1B;AAmCA,WAAOL,MAAP;AACD,GArCD;AAsCD","sourcesContent":["import { toaster, Position } from \"@vechaiui/toasted-notes\";\nimport { DefaultProps } from \"@vechaiui/theme\";\nimport * as React from \"react\";\nimport { useCallback } from \"react\";\n\ninterface IToast extends DefaultProps {\n  /**\n   * The title of the toast.\n   */\n  title?: string;\n  /**\n   * If `true` adds a close button to the toast.\n   */\n  closeable?: boolean;\n  /**\n   * Callback function to close the toast.\n   */\n  onClose?: () => void;\n  /**\n   * Callback function to undo the toast.\n   */\n  onUndo?: () => void;\n  /**\n   * The description of the toast\n   */\n  description?: string;\n  /**\n   * The undo text of the toast\n   */\n  undoText?: string;\n  /**\n   * Duration before dismiss in milliseconds, or `null` to never dismiss.\n   */\n  duration?: number | null;\n  /**\n   * One of toasted-notes positions.\n   */\n  position?: keyof typeof Position;\n  /**\n   * The message of the toast\n   */\n  message?: string;\n  /**\n   * The status of the toast\n   */\n  status?: \"info\" | \"success\" | \"error\" | \"warning\";\n  /**\n   * Custom icon\n   */\n  icon?: React.ElementType;\n  /**\n   * Custom close icon\n   */\n  closeIcon?: React.ElementType;\n}\n\ninterface RenderOption {\n  render?: (props: {\n    onClose: (id: string) => void;\n    id: string;\n  }) => React.ReactNode;\n}\nexport type useToastOptions = IToast & RenderOption;\n\nexport function createToast(Comp: React.ElementType) {\n  return function() {\n    const notify = useCallback(\n      ({\n        position = \"bottom\",\n        duration = 5000,\n        render,\n        ...rest\n      }: useToastOptions) => {\n        const options = {\n          position,\n          duration,\n        };\n\n        if (render) {\n          return toaster.notify(\n            ({ onClose, id }) => render({ onClose, id, ...rest }),\n            options\n          );\n        }\n\n        toaster.notify(\n          ({ onClose, id }) => (\n            <Comp\n              {...{\n                onClose,\n                id,\n                ...rest,\n              }}\n            />\n          ),\n          options\n        );\n      },\n      []\n    );\n\n    return notify;\n  };\n}"],"file":"toast.js"}